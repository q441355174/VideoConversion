@*
@page
@model IndexModel
@{
    ViewData["Title"] = "视频转换工具";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="text-center mb-4">
                <h1 class="display-4">
                    <i class="fas fa-video text-primary"></i>
                    视频转换工具
                </h1>
                <p class="lead">基于HandBrake的强大视频转换功能，支持多种格式和预设选项</p>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- 左侧：文件上传和设置 -->
        <div class="col-lg-6">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-upload"></i>
                        文件上传和设置
                    </h5>
                </div>
                <div class="card-body">
                    <form id="conversionForm" enctype="multipart/form-data">
                        <!-- 文件选择 -->
                        <div class="mb-3">
                            <label for="videoFile" class="form-label">选择视频文件</label>
                            <div class="file-drop-zone" id="fileDropZone">
                                <div class="text-center">
                                    <i class="fas fa-cloud-upload-alt fa-3x text-muted mb-3"></i>
                                    <p class="mb-2">拖拽文件到此处或点击选择</p>
                                    <input type="file" class="form-control" id="videoFile" name="videoFile"
                                           accept="@string.Join(",", Model.SupportedExtensions.Select(ext => ext))" required>
                                </div>
                            </div>
                            <div class="form-text mt-2">
                                <i class="fas fa-info-circle"></i>
                                支持格式: @string.Join(", ", Model.SupportedExtensions)
                                <br><i class="fas fa-weight-hanging"></i>
                                最大文件大小: @Model.MaxFileSizeFormatted
                            </div>
                            <div id="selectedFileInfo" class="mt-2" style="display: none;">
                                <div class="alert alert-info">
                                    <i class="fas fa-file-video"></i>
                                    已选择: <span id="selectedFileName"></span>
                                    (<span id="selectedFileSize"></span>)
                                </div>
                            </div>

                            <!-- 上传进度条 -->
                            <div id="uploadProgressContainer" class="mt-3" style="display: none;">
                                <div class="card border-primary">
                                    <div class="card-header bg-light">
                                        <h6 class="mb-0">
                                            <i class="fas fa-upload text-primary"></i>
                                            文件上传进度
                                        </h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="mb-2">
                                            <div class="d-flex justify-content-between">
                                                <span id="uploadFileName">正在上传...</span>
                                                <span id="uploadPercentage">0%</span>
                                            </div>
                                        </div>
                                        <div class="progress mb-2" style="height: 20px;">
                                            <div id="uploadProgressBar" class="progress-bar progress-bar-striped progress-bar-animated bg-primary"
                                                 role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                                            </div>
                                        </div>
                                        <div class="row text-muted small">
                                            <div class="col-6">
                                                <i class="fas fa-tachometer-alt"></i>
                                                速度: <span id="uploadSpeed">0 MB/s</span>
                                            </div>
                                            <div class="col-6 text-end">
                                                <i class="fas fa-clock"></i>
                                                剩余: <span id="uploadTimeRemaining">计算中...</span>
                                            </div>
                                        </div>
                                        <div class="row text-muted small mt-1">
                                            <div class="col-12">
                                                <i class="fas fa-info-circle"></i>
                                                <span id="uploadedSize">0 MB</span> / <span id="totalSize">0 MB</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- 任务名称 -->
                        <div class="mb-3">
                            <label for="taskName" class="form-label">任务名称</label>
                            <input type="text" class="form-control" id="taskName" name="taskName"
                                   placeholder="可选，留空将使用文件名">
                        </div>

                        <!-- 转换预设 -->
                        <div class="mb-3">
                            <label for="preset" class="form-label">转换预设</label>
                            <select class="form-select" id="preset" name="preset">
                                @foreach (var preset in Model.ConversionPresets)
                                {
                                    <option value="@preset.Name" selected="@preset.IsDefault">
                                        @preset.Name - @preset.Description
                                    </option>
                                }
                            </select>
                        </div>

                        <!-- 详细转码设置 -->
                        <div class="accordion mb-3" id="advancedSettings">
                            <!-- 基本设置 -->
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button" type="button"
                                            data-bs-toggle="collapse" data-bs-target="#basicPanel">
                                        <i class="fas fa-cogs"></i>&nbsp;基本设置
                                    </button>
                                </h2>
                                <div id="basicPanel" class="accordion-collapse collapse show">
                                    <div class="accordion-body">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <label for="outputFormat" class="form-label">输出格式</label>
                                                <select class="form-select" id="outputFormat" name="outputFormat">
                                                    <option value="mp4">MP4 (H.264)</option>
                                                    <option value="mp4_h265">MP4 (H.265/HEVC)</option>
                                                    <option value="webm">WebM (VP9)</option>
                                                    <option value="avi">AVI</option>
                                                    <option value="mkv">MKV</option>
                                                    <option value="mov">MOV</option>
                                                    <option value="mp3">MP3 (仅音频)</option>
                                                    <option value="aac">AAC (仅音频)</option>
                                                    <option value="flac">FLAC (仅音频)</option>
                                                </select>
                                            </div>
                                            <div class="col-md-6">
                                                <label for="resolution" class="form-label">分辨率</label>
                                                <select class="form-select" id="resolution" name="resolution">
                                                    <option value="">保持原始</option>
                                                    <option value="3840x2160">4K (3840x2160)</option>
                                                    <option value="2560x1440">2K (2560x1440)</option>
                                                    <option value="1920x1080">1080p (1920x1080)</option>
                                                    <option value="1280x720">720p (1280x720)</option>
                                                    <option value="854x480">480p (854x480)</option>
                                                    <option value="640x360">360p (640x360)</option>
                                                    <option value="custom">自定义</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="row mt-2" id="customResolution" style="display: none;">
                                            <div class="col-md-3">
                                                <label for="customWidth" class="form-label">宽度</label>
                                                <input type="number" class="form-control" id="customWidth" placeholder="1920">
                                            </div>
                                            <div class="col-md-3">
                                                <label for="customHeight" class="form-label">高度</label>
                                                <input type="number" class="form-control" id="customHeight" placeholder="1080">
                                            </div>
                                            <div class="col-md-6">
                                                <label for="aspectRatio" class="form-label">宽高比</label>
                                                <select class="form-select" id="aspectRatio">
                                                    <option value="">保持原始</option>
                                                    <option value="16:9">16:9</option>
                                                    <option value="4:3">4:3</option>
                                                    <option value="1:1">1:1 (正方形)</option>
                                                    <option value="21:9">21:9 (超宽屏)</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- 视频设置 -->
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button collapsed" type="button"
                                            data-bs-toggle="collapse" data-bs-target="#videoPanel">
                                        <i class="fas fa-video"></i>&nbsp;视频设置
                                    </button>
                                </h2>
                                <div id="videoPanel" class="accordion-collapse collapse">
                                    <div class="accordion-body">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <label for="videoCodec" class="form-label">视频编解码器</label>
                                                <select class="form-select" id="videoCodec" name="videoCodec">
                                                    <option value="libx264">H.264 (x264)</option>
                                                    <option value="libx265">H.265 (x265)</option>
                                                    <option value="libvpx-vp9">VP9</option>
                                                    <option value="libvpx">VP8</option>
                                                    <option value="libaom-av1">AV1</option>
                                                    <option value="mpeg4">MPEG-4</option>
                                                </select>
                                            </div>
                                            <div class="col-md-6">
                                                <label for="frameRate" class="form-label">帧率 (FPS)</label>
                                                <select class="form-select" id="frameRate" name="frameRate">
                                                    <option value="">保持原始</option>
                                                    <option value="23.976">23.976 (电影)</option>
                                                    <option value="24">24</option>
                                                    <option value="25">25 (PAL)</option>
                                                    <option value="29.97">29.97 (NTSC)</option>
                                                    <option value="30">30</option>
                                                    <option value="50">50</option>
                                                    <option value="60">60</option>
                                                    <option value="120">120</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="row mt-3">
                                            <div class="col-md-6">
                                                <label class="form-label">质量控制模式</label>
                                                <div class="btn-group w-100" role="group">
                                                    <input type="radio" class="btn-check" name="qualityMode" id="crfMode" value="crf" checked>
                                                    <label class="btn btn-outline-primary" for="crfMode">CRF (质量)</label>

                                                    <input type="radio" class="btn-check" name="qualityMode" id="bitrateMode" value="bitrate">
                                                    <label class="btn btn-outline-primary" for="bitrateMode">比特率</label>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div id="crfSettings">
                                                    <label for="videoQuality" class="form-label">CRF值</label>
                                                    <input type="range" class="form-range" id="videoQuality"
                                                           min="0" max="51" value="23">
                                                    <div class="form-text">
                                                        <span id="qualityValue">23</span> (0=无损, 18=高质量, 23=默认, 28=低质量)
                                                    </div>
                                                </div>
                                                <div id="bitrateSettings" style="display: none;">
                                                    <label for="videoBitrate" class="form-label">视频比特率 (kbps)</label>
                                                    <input type="number" class="form-control" id="videoBitrate"
                                                           placeholder="5000" min="100" max="50000">
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row mt-3">
                                            <div class="col-md-6">
                                                <label for="preset" class="form-label">编码预设 (速度vs质量)</label>
                                                <select class="form-select" id="encodingPreset" name="encodingPreset">
                                                    <option value="ultrafast">ultrafast (最快)</option>
                                                    <option value="superfast">superfast</option>
                                                    <option value="veryfast">veryfast</option>
                                                    <option value="faster">faster</option>
                                                    <option value="fast">fast</option>
                                                    <option value="medium" selected>medium (平衡)</option>
                                                    <option value="slow">slow</option>
                                                    <option value="slower">slower</option>
                                                    <option value="veryslow">veryslow (最慢/最高质量)</option>
                                                </select>
                                            </div>
                                            <div class="col-md-6">
                                                <label for="profile" class="form-label">H.264配置文件</label>
                                                <select class="form-select" id="profile" name="profile">
                                                    <option value="">自动</option>
                                                    <option value="baseline">Baseline</option>
                                                    <option value="main">Main</option>
                                                    <option value="high">High</option>
                                                    <option value="high10">High 10</option>
                                                    <option value="high422">High 4:2:2</option>
                                                    <option value="high444">High 4:4:4</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- 音频设置 -->
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button collapsed" type="button"
                                            data-bs-toggle="collapse" data-bs-target="#audioPanel">
                                        <i class="fas fa-volume-up"></i>&nbsp;音频设置
                                    </button>
                                </h2>
                                <div id="audioPanel" class="accordion-collapse collapse">
                                    <div class="accordion-body">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <label for="audioCodec" class="form-label">音频编解码器</label>
                                                <select class="form-select" id="audioCodec" name="audioCodec">
                                                    <option value="aac">AAC</option>
                                                    <option value="libmp3lame">MP3</option>
                                                    <option value="libvorbis">Vorbis</option>
                                                    <option value="libopus">Opus</option>
                                                    <option value="flac">FLAC (无损)</option>
                                                    <option value="pcm_s16le">PCM (无压缩)</option>
                                                    <option value="ac3">AC-3</option>
                                                    <option value="eac3">E-AC-3</option>
                                                </select>
                                            </div>
                                            <div class="col-md-6">
                                                <label for="audioChannels" class="form-label">声道数</label>
                                                <select class="form-select" id="audioChannels" name="audioChannels">
                                                    <option value="">保持原始</option>
                                                    <option value="1">单声道 (1.0)</option>
                                                    <option value="2">立体声 (2.0)</option>
                                                    <option value="6">5.1环绕声</option>
                                                    <option value="8">7.1环绕声</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="row mt-3">
                                            <div class="col-md-6">
                                                <label class="form-label">音频质量模式</label>
                                                <div class="btn-group w-100" role="group">
                                                    <input type="radio" class="btn-check" name="audioQualityMode" id="audioBitrateMode" value="bitrate" checked>
                                                    <label class="btn btn-outline-success" for="audioBitrateMode">比特率</label>

                                                    <input type="radio" class="btn-check" name="audioQualityMode" id="audioQualityMode" value="quality">
                                                    <label class="btn btn-outline-success" for="audioQualityMode">质量</label>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div id="audioBitrateSettings">
                                                    <label for="audioBitrate" class="form-label">音频比特率</label>
                                                    <select class="form-select" id="audioBitrate" name="audioBitrate">
                                                        <option value="64k">64 kbps</option>
                                                        <option value="96k">96 kbps</option>
                                                        <option value="128k" selected>128 kbps</option>
                                                        <option value="160k">160 kbps</option>
                                                        <option value="192k">192 kbps</option>
                                                        <option value="256k">256 kbps</option>
                                                        <option value="320k">320 kbps</option>
                                                        <option value="custom">自定义</option>
                                                    </select>
                                                </div>
                                                <div id="audioQualitySettings" style="display: none;">
                                                    <label for="audioQualityValue" class="form-label">音频质量</label>
                                                    <input type="range" class="form-range" id="audioQualityValue"
                                                           min="0" max="9" value="2">
                                                    <div class="form-text">
                                                        <span id="audioQualityDisplay">2</span> (0=最高质量, 9=最低质量)
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row mt-3" id="customAudioBitrate" style="display: none;">
                                            <div class="col-md-6">
                                                <label for="customAudioBitrateValue" class="form-label">自定义比特率 (kbps)</label>
                                                <input type="number" class="form-control" id="customAudioBitrateValue"
                                                       placeholder="128" min="8" max="1411">
                                            </div>
                                        </div>
                                        <div class="row mt-3">
                                            <div class="col-md-6">
                                                <label for="sampleRate" class="form-label">采样率</label>
                                                <select class="form-select" id="sampleRate" name="sampleRate">
                                                    <option value="">保持原始</option>
                                                    <option value="8000">8 kHz</option>
                                                    <option value="11025">11.025 kHz</option>
                                                    <option value="16000">16 kHz</option>
                                                    <option value="22050">22.05 kHz</option>
                                                    <option value="32000">32 kHz</option>
                                                    <option value="44100">44.1 kHz (CD质量)</option>
                                                    <option value="48000">48 kHz (DVD质量)</option>
                                                    <option value="96000">96 kHz (高清)</option>
                                                    <option value="192000">192 kHz (超高清)</option>
                                                </select>
                                            </div>
                                            <div class="col-md-6">
                                                <label for="audioVolume" class="form-label">音量调整</label>
                                                <input type="range" class="form-range" id="audioVolume"
                                                       min="0" max="200" value="100">
                                                <div class="form-text">
                                                    <span id="volumeValue">100</span>% (100%=原始音量)
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- 高级选项 -->
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button collapsed" type="button"
                                            data-bs-toggle="collapse" data-bs-target="#advancedPanel">
                                        <i class="fas fa-tools"></i>&nbsp;高级选项
                                    </button>
                                </h2>
                                <div id="advancedPanel" class="accordion-collapse collapse">
                                    <div class="accordion-body">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <label for="startTime" class="form-label">开始时间 (HH:MM:SS)</label>
                                                <input type="text" class="form-control" id="startTime" name="startTime"
                                                       placeholder="00:00:00" pattern="[0-9]{2}:[0-9]{2}:[0-9]{2}">
                                                <div class="form-text">留空表示从头开始</div>
                                            </div>
                                            <div class="col-md-6">
                                                <label for="duration" class="form-label">持续时间 (HH:MM:SS)</label>
                                                <input type="text" class="form-control" id="duration" name="duration"
                                                       placeholder="00:00:00" pattern="[0-9]{2}:[0-9]{2}:[0-9]{2}">
                                                <div class="form-text">留空表示到结尾</div>
                                            </div>
                                        </div>
                                        <div class="row mt-3">
                                            <div class="col-md-6">
                                                <label for="deinterlace" class="form-label">去隔行扫描</label>
                                                <select class="form-select" id="deinterlace" name="deinterlace">
                                                    <option value="">不处理</option>
                                                    <option value="yadif">YADIF (推荐)</option>
                                                    <option value="bwdif">BWDIF</option>
                                                    <option value="w3fdif">W3FDIF</option>
                                                </select>
                                            </div>
                                            <div class="col-md-6">
                                                <label for="denoise" class="form-label">降噪</label>
                                                <select class="form-select" id="denoise" name="denoise">
                                                    <option value="">不处理</option>
                                                    <option value="nlmeans">NLMeans (高质量)</option>
                                                    <option value="hqdn3d">HQDN3D (快速)</option>
                                                    <option value="bm3d">BM3D (最佳)</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="row mt-3">
                                            <div class="col-md-6">
                                                <label for="colorSpace" class="form-label">色彩空间</label>
                                                <select class="form-select" id="colorSpace" name="colorSpace">
                                                    <option value="">保持原始</option>
                                                    <option value="bt709">BT.709 (HD)</option>
                                                    <option value="bt2020">BT.2020 (4K HDR)</option>
                                                    <option value="smpte170m">SMPTE-170M (NTSC)</option>
                                                    <option value="bt470bg">BT.470BG (PAL)</option>
                                                </select>
                                            </div>
                                            <div class="col-md-6">
                                                <label for="pixelFormat" class="form-label">像素格式</label>
                                                <select class="form-select" id="pixelFormat" name="pixelFormat">
                                                    <option value="">自动</option>
                                                    <option value="yuv420p">YUV420P (标准)</option>
                                                    <option value="yuv422p">YUV422P</option>
                                                    <option value="yuv444p">YUV444P (高质量)</option>
                                                    <option value="yuv420p10le">YUV420P10LE (10-bit)</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="row mt-3">
                                            <div class="col-12">
                                                <label for="customParams" class="form-label">自定义FFmpeg参数</label>
                                                <textarea class="form-control" id="customParams" name="customParams"
                                                          rows="2" placeholder="例如: -tune film -x264opts keyint=250"></textarea>
                                                <div class="form-text">
                                                    <i class="fas fa-exclamation-triangle text-warning"></i>
                                                    高级用户选项，错误的参数可能导致转换失败
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row mt-3">
                                            <div class="col-12">
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" id="twoPass" name="twoPass">
                                                    <label class="form-check-label" for="twoPass">
                                                        启用两遍编码 (更好的质量，但速度较慢)
                                                    </label>
                                                </div>
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" id="fastStart" name="fastStart" checked>
                                                    <label class="form-check-label" for="fastStart">
                                                        快速启动 (优化网络播放)
                                                    </label>
                                                </div>
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" id="copyTimestamps" name="copyTimestamps" checked>
                                                    <label class="form-check-label" for="copyTimestamps">
                                                        保持时间戳
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- 提交按钮 -->
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary btn-lg" id="startConversion">
                                <i class="fas fa-play"></i>
                                开始转换
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- 右侧：转换进度和状态 -->
        <div class="col-lg-6">
            <div class="card shadow-sm">
                <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-tasks"></i>
                        转换进度
                    </h5>
                    <div>
                        <small>连接状态: </small>
                        <span id="connectionStatus" class="badge bg-warning connection-status">Disconnected</span>
                    </div>
                </div>
                <div class="card-body">
                    <!-- 当前任务进度 -->
                    <div id="currentTask" style="display: none;">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h6 class="mb-0">当前任务: <span id="currentTaskName"></span></h6>
                            <small class="text-muted" id="taskId"></small>
                        </div>

                        <!-- 文件信息 -->
                        <div class="row mb-3" id="fileInfo" style="display: none;">
                            <div class="col-md-6 mb-2">
                                <small class="text-muted"><i class="fas fa-file-video"></i> 原始文件</small><br>
                                <span id="originalFileName" class="small fw-bold"></span>
                            </div>
                            <div class="col-md-6 mb-2">
                                <small class="text-muted"><i class="fas fa-cog"></i> 输出格式</small><br>
                                <span id="outputFormat" class="small fw-bold"></span>
                            </div>
                        </div>

                        <!-- 转换参数详情 -->
                        <div class="accordion mb-3" id="taskDetailsAccordion" style="display: none;">
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button collapsed" type="button"
                                            data-bs-toggle="collapse" data-bs-target="#taskDetailsPanel">
                                        <i class="fas fa-info-circle"></i>&nbsp;转换参数详情
                                    </button>
                                </h2>
                                <div id="taskDetailsPanel" class="accordion-collapse collapse">
                                    <div class="accordion-body">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <h6><i class="fas fa-video"></i> 视频设置</h6>
                                                <ul class="list-unstyled small">
                                                    <li><strong>编解码器:</strong> <span id="videoCodecDetail">-</span> <span id="gpuAccelBadge" class="badge bg-success ms-1" style="display: none;">🚀 GPU加速</span></li>
                                                    <li><strong>分辨率:</strong> <span id="resolutionDetail">-</span></li>
                                                    <li><strong>质量:</strong> <span id="qualityDetail">-</span></li>
                                                    <li><strong>帧率:</strong> <span id="frameRateDetail">-</span></li>
                                                </ul>
                                            </div>
                                            <div class="col-md-6">
                                                <h6><i class="fas fa-volume-up"></i> 音频设置</h6>
                                                <ul class="list-unstyled small">
                                                    <li><strong>编解码器:</strong> <span id="audioCodecDetail">-</span></li>
                                                    <li><strong>比特率:</strong> <span id="audioBitrateDetail">-</span></li>
                                                    <li><strong>声道:</strong> <span id="audioChannelsDetail">-</span></li>
                                                    <li><strong>采样率:</strong> <span id="sampleRateDetail">-</span></li>
                                                </ul>
                                            </div>
                                        </div>
                                        <div class="row mt-2">
                                            <div class="col-12">
                                                <h6><i class="fas fa-tools"></i> 高级选项</h6>
                                                <ul class="list-unstyled small">
                                                    <li><strong>编码预设:</strong> <span id="encodingPresetDetail">-</span></li>
                                                    <li><strong>两遍编码:</strong> <span id="twoPassDetail">-</span></li>
                                                    <li><strong>快速启动:</strong> <span id="fastStartDetail">-</span></li>
                                                    <li id="customParamsDetail" style="display: none;"><strong>自定义参数:</strong> <code class="small"></code></li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- 进度条 -->
                        <div class="progress mb-3" style="height: 30px;">
                            <div id="progressBar" class="progress-bar progress-bar-striped progress-bar-animated"
                                 role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                                <span class="fw-bold">0%</span>
                            </div>
                        </div>

                        <!-- 详细状态信息 -->
                        <div class="row text-center mb-3">
                            <div class="col-3">
                                <small class="text-muted">转换速度</small><br>
                                <span id="conversionSpeed" class="fw-bold">-</span>
                            </div>
                            <div class="col-3">
                                <small class="text-muted">剩余时间</small><br>
                                <span id="remainingTime" class="fw-bold">-</span>
                            </div>
                            <div class="col-3">
                                <small class="text-muted">已用时间</small><br>
                                <span id="elapsedTime" class="fw-bold">-</span>
                            </div>
                            <div class="col-3">
                                <small class="text-muted">文件大小</small><br>
                                <span id="fileSize" class="fw-bold">-</span>
                            </div>
                        </div>

                        <!-- 当前状态 -->
                        <div class="alert alert-info mb-3" role="alert">
                            <i class="fas fa-info-circle"></i>
                            <span id="taskStatus">等待中...</span>
                        </div>

                        <!-- 错误详情 -->
                        <div class="alert alert-danger mb-3" id="errorDetails" style="display: none;" role="alert">
                            <h6><i class="fas fa-exclamation-triangle"></i> 错误详情</h6>
                            <div id="errorMessage" class="small"></div>
                            <div class="mt-2">
                                <button class="btn btn-sm btn-outline-danger" onclick="copyErrorToClipboard()">
                                    <i class="fas fa-copy"></i> 复制错误信息
                                </button>
                                <button class="btn btn-sm btn-outline-info" onclick="showTroubleshooting()">
                                    <i class="fas fa-question-circle"></i> 故障排除
                                </button>
                            </div>
                        </div>

                        <!-- 故障排除提示 -->
                        <div class="alert alert-warning mb-3" id="troubleshootingTips" style="display: none;" role="alert">
                            <h6><i class="fas fa-tools"></i> 故障排除建议</h6>
                            <ul class="mb-0 small" id="troubleshootingList">
                                <!-- 动态生成故障排除建议 -->
                            </ul>
                        </div>

                        <!-- 操作按钮 -->
                        <div class="d-flex gap-2" id="taskActionButtons">
                            <button type="button" class="btn btn-outline-danger btn-sm" id="cancelTask">
                                <i class="fas fa-stop"></i> 取消转换
                            </button>
                            <button type="button" class="btn btn-outline-info btn-sm" id="refreshTask" style="display: none;">
                                <i class="fas fa-sync"></i> 刷新状态
                            </button>
                            <a class="btn btn-outline-success btn-sm" id="downloadTask" style="display: none;">
                                <i class="fas fa-download"></i> 下载文件
                            </a>
                            <button type="button" class="btn btn-outline-primary btn-sm" id="restartTask" style="display: none;">
                                <i class="fas fa-redo"></i> 重新开始
                            </button>
                        </div>
                    </div>

                    <!-- 无任务时的提示 -->
                    <div id="noTask" class="text-center text-muted">
                        <i class="fas fa-video fa-3x mb-3 text-secondary"></i>
                        <h6>暂无转换任务</h6>
                        <p class="mb-0">请选择视频文件并开始转换</p>
                    </div>
                </div>
            </div>

            <!-- 最近任务 -->
            <div class="card shadow-sm mt-3">
                <div class="card-header bg-info text-white">
                    <h6 class="mb-0">
                        <i class="fas fa-history"></i>
                        最近任务
                    </h6>
                </div>
                <div class="card-body">
                    <div id="recentTasks">
                        <div class="text-center text-muted">
                            <small>暂无任务记录</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- GPU硬件加速信息 -->
            <div class="card shadow-sm mt-3">
                <div class="card-header bg-gradient text-white d-flex justify-content-between align-items-center" style="background: linear-gradient(45deg, #6f42c1, #e83e8c);">
                    <h6 class="mb-0">
                        <i class="fas fa-microchip"></i>
                        GPU硬件加速
                    </h6>
                    <button id="refreshGpuInfo" class="btn btn-sm btn-outline-light" title="刷新GPU信息">
                        <i class="fas fa-sync-alt"></i>
                    </button>
                </div>
                <div class="card-body">
                    <div id="gpuInfo">
                        <div class="text-center text-muted">
                            <div class="spinner-border spinner-border-sm" role="status">
                                <span class="visually-hidden">检测中...</span>
                            </div>
                            <small class="ms-2">正在检测GPU硬件加速能力...</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        /* 进度条动画效果 */
        .progress-bar-animated {
            animation: progress-bar-stripes 1s linear infinite;
        }

        /* 连接状态指示器 */
        .connection-status {
            position: relative;
            display: inline-block;
        }

        .connection-status::before {
            content: '';
            position: absolute;
            left: -10px;
            top: 50%;
            transform: translateY(-50%);
            width: 6px;
            height: 6px;
            border-radius: 50%;
            background-color: currentColor;
            animation: pulse 2s infinite;
        }

        @@keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        /* 任务卡片悬停效果 */
        .task-card {
            transition: all 0.3s ease;
            border: 1px solid #dee2e6;
        }

        .task-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            border-color: #007bff;
        }

        /* 进度条渐变效果 */
        .progress-bar.bg-primary {
            background: linear-gradient(45deg, #007bff, #0056b3) !important;
        }

        .progress-bar.bg-success {
            background: linear-gradient(45deg, #28a745, #1e7e34) !important;
        }

        .progress-bar.bg-info {
            background: linear-gradient(45deg, #17a2b8, #138496) !important;
        }

        .progress-bar.bg-danger {
            background: linear-gradient(45deg, #dc3545, #bd2130) !important;
        }

        /* 上传进度条特殊样式 */
        #uploadProgressBar {
            transition: width 0.3s ease-out !important;
            background: linear-gradient(45deg, #007bff, #0056b3) !important;
            box-shadow: 0 2px 4px rgba(0,123,255,0.3);
        }

        #uploadProgressBar.bg-success {
            background: linear-gradient(45deg, #28a745, #1e7e34) !important;
            box-shadow: 0 2px 4px rgba(40,167,69,0.3);
        }

        #uploadProgressBar.bg-info {
            background: linear-gradient(45deg, #17a2b8, #138496) !important;
            box-shadow: 0 2px 4px rgba(23,162,184,0.3);
        }

        /* 上传进度容器动画 */
        #uploadProgressContainer {
            animation: slideDown 0.3s ease-out;
        }

        @@keyframes slideDown {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* 高速上传时的特殊效果 */
        .high-speed-upload .progress-bar {
            animation: pulse 1s ease-in-out infinite alternate;
        }

        @@keyframes pulse {
            from {
                box-shadow: 0 2px 4px rgba(0,123,255,0.3);
            }
            to {
                box-shadow: 0 2px 8px rgba(0,123,255,0.6);
            }
        }

        /* 状态徽章动画 */
        .badge.bg-primary {
            animation: pulse-blue 2s infinite;
        }

        @@keyframes pulse-blue {
            0% { box-shadow: 0 0 0 0 rgba(0, 123, 255, 0.7); }
            70% { box-shadow: 0 0 0 10px rgba(0, 123, 255, 0); }
            100% { box-shadow: 0 0 0 0 rgba(0, 123, 255, 0); }
        }

        /* 文件拖拽区域 */
        .file-drop-zone {
            border: 2px dashed #dee2e6;
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            transition: all 0.3s ease;
            background-color: #f8f9fa;
        }

        .file-drop-zone.dragover {
            border-color: #007bff;
            background-color: #e3f2fd;
        }

        /* 加载动画 */
        .loading-spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #007bff;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* 状态图标 */
        .status-icon {
            font-size: 1.2em;
            margin-right: 5px;
        }

        /* 响应式调整 */
        @@media (max-width: 768px) {
            .task-card {
                margin-bottom: 10px;
            }

            .progress {
                height: 25px !important;
            }

            .btn-sm {
                font-size: 0.8rem;
                padding: 0.25rem 0.5rem;
            }
        }

        /* 预设更新提示样式 */
        .preset-updated {
            border-color: #28a745 !important;
            box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25) !important;
            transition: all 0.3s ease;
        }

        .preset-updated:focus {
            border-color: #28a745 !important;
            box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25) !important;
        }

        /* GPU加速标识动画 */
        .gpu-accel-badge {
            animation: pulse 2s infinite;
        }

        @@keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
        }

        /* 智能预设选择提示 */
        .smart-preset-notification {
            border-left: 4px solid #28a745;
            background: linear-gradient(90deg, rgba(40, 167, 69, 0.1) 0%, rgba(40, 167, 69, 0.05) 100%);
        }
    </style>
}

@section Scripts {
    <script src="~/lib/signalr/dist/browser/signalr.min.js"></script>
    <script>
        // 等待DOM加载完成
        document.addEventListener('DOMContentLoaded', function() {
            // SignalR连接配置
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/conversionHub")
                .withAutomaticReconnect([0, 2000, 10000, 30000]) // 自动重连
                .configureLogging(signalR.LogLevel.Information)
                .build();

        let currentTaskId = null;
        let connectionState = 'Disconnected';
        let refreshInterval = null;
        let lastRefreshTime = 0;

        // 显示警告消息
        function showAlert(type, message) {
            // 创建警告元素
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'danger' ? 'exclamation-triangle' : 'info-circle'}"></i>
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;

            // 插入到页面顶部
            const container = document.querySelector('.container-fluid');
            container.insertBefore(alertDiv, container.firstChild);

            // 5秒后自动消失
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.remove();
                }
            }, 5000);
        }

        // 更新连接状态显示
        function updateConnectionStatus(status) {
            connectionState = status;
            const statusElement = document.getElementById('connectionStatus');
            if (statusElement) {
                statusElement.textContent = status;
                statusElement.className = `badge ${status === 'Connected' ? 'bg-success' : 'bg-warning'}`;
            }
        }

        // 启动SignalR连接
        async function startConnection() {
            try {
                await connection.start();
                console.log("✅ SignalR连接成功");
                updateConnectionStatus('Connected');
                showAlert('success', 'SignalR连接已建立，可以实时接收转换进度');

                // 连接成功后加载最近任务
                loadRecentTasks();
            } catch (err) {
                console.error("❌ SignalR连接失败:", err);
                updateConnectionStatus('Failed');
                showAlert('danger', 'SignalR连接失败，进度更新可能不可用');

                // 5秒后重试连接
                setTimeout(startConnection, 5000);
            }
        }

        // 连接状态事件处理
        connection.onreconnecting((error) => {
            console.log("🔄 SignalR重连中...", error);
            updateConnectionStatus('Reconnecting');
            showAlert('warning', 'SignalR连接中断，正在重连...');
        });

        connection.onreconnected((connectionId) => {
            console.log("✅ SignalR重连成功:", connectionId);
            updateConnectionStatus('Connected');
            showAlert('success', 'SignalR连接已恢复');

            // 重连后重新加入任务组
            if (currentTaskId) {
                connection.invoke("JoinTaskGroup", currentTaskId).catch(err => {
                    console.error("重新加入任务组失败:", err);
                });
            }
        });

        connection.onclose((error) => {
            console.log("❌ SignalR连接关闭:", error);
            updateConnectionStatus('Disconnected');
            showAlert('danger', 'SignalR连接已断开');
        });

        // 启动连接
        startConnection();

        // 监听进度更新
        connection.on("ProgressUpdate", function (data) {
            updateProgress(data);
        });

        // 监听上传进度更新
        connection.on("UploadProgress", function (data) {
            updateUploadProgress(data);
        });

        // 监听上传开始
        connection.on("UploadStarted", function (data) {
            console.log("📤 上传开始:", data);
            const uploadContainer = document.getElementById('uploadProgressContainer');
            uploadContainer.style.display = 'block';
            document.getElementById('uploadFileName').textContent = data.FileName;
            document.getElementById('totalSize').textContent = formatFileSize(data.TotalSize);
        });

        // 监听上传完成
        connection.on("UploadCompleted", function (data) {
            console.log("✅ 上传完成:", data);
            showAlert('success', `文件上传完成: ${data.FilePath}`);
        });

        // 监听上传失败
        connection.on("UploadFailed", function (data) {
            console.log("❌ 上传失败:", data);
            showAlert('danger', `上传失败: ${data.ErrorMessage}`);
            hideUploadProgress();
        });

        // 监听状态更新
        connection.on("StatusUpdate", function (data) {
            updateTaskStatus(data);
        });

        // 监听任务完成
        connection.on("TaskCompleted", function (data) {
            handleTaskCompleted(data);
        });

        // 监听任务状态响应
        connection.on("TaskStatus", function (data) {
            console.log("📊 收到任务状态:", data);
            if (data.taskId === currentTaskId) {
                updateProgress({
                    taskId: data.taskId,
                    progress: data.progress,
                    message: data.status,
                    speed: data.conversionSpeed,
                    remainingSeconds: data.estimatedTimeRemaining
                });
            }
        });

        // 监听任务未找到
        connection.on("TaskNotFound", function (taskId) {
            console.warn("⚠️ 任务未找到:", taskId);
            showAlert('warning', `任务 ${taskId} 未找到`);
        });

        // 监听系统通知
        connection.on("SystemNotification", function (data) {
            console.log("📢 系统通知:", data);
            showAlert(data.type || 'info', data.message);
        });

        // 监听错误
        connection.on("Error", function (message) {
            console.error("❌ SignalR错误:", message);
            showAlert('danger', 'SignalR错误: ' + message);
        });

        // 监听任务取消完成
        connection.on("TaskCancelCompleted", function (data) {
            console.log("🚫 任务取消完成:", data);
            if (data.taskId === currentTaskId) {
                showAlert('success', '任务取消成功');

                // 更新UI状态
                const taskStatus = document.getElementById('taskStatus');
                if (taskStatus) {
                    taskStatus.textContent = '任务已取消';
                    const statusAlert = taskStatus.closest('.alert');
                    if (statusAlert) {
                        statusAlert.className = 'alert alert-warning mb-3';
                    }
                }

                // 更新按钮为取消状态
                updateTaskActionButtons('cancelled');

                // 清除当前任务
                currentTaskId = null;
                currentTaskStartTime = null;

                // 刷新最近任务列表
                setTimeout(loadRecentTasks, 1000);
            }
        });

        // 监听任务被取消（来自其他客户端）
        connection.on("TaskCancelled", function (data) {
            console.log("🚫 任务被取消:", data);
            updateRecentTaskStatus(data.taskId, 'Cancelled');

            // 如果是当前任务被其他客户端取消
            if (data.taskId === currentTaskId) {
                showAlert('warning', '当前任务已被其他客户端取消');
                currentTaskId = null;
                currentTaskStartTime = null;

                // 隐藏当前任务显示
                document.getElementById('currentTask').style.display = 'none';
                document.getElementById('noTask').style.display = 'block';
            }
        });

        // 监听新任务创建（来自其他客户端）
        connection.on("TaskCreated", function (data) {
            console.log("📝 新任务创建:", data);
            // 延迟刷新以确保数据库已更新
            setTimeout(loadRecentTasks, 1000);
        });

        // 监听任务状态变化（全局）
        connection.on("TaskStatusChanged", function (data) {
            console.log("📊 任务状态变化:", data);
            updateRecentTaskStatus(data.taskId, data.status);

            // 如果有进度信息，也更新进度
            if (data.progress !== undefined) {
                updateRecentTaskProgress(data.taskId, data.progress, data.message);
            }
        });

        // 表单提交处理 - 支持大文件上传和进度跟踪
        document.getElementById('conversionForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            const fileInput = document.getElementById('videoFile');
            const file = fileInput.files[0];

            if (!file) {
                showAlert('danger', '请选择一个文件');
                return;
            }

            // 检查文件大小，如果超过100MB使用大文件上传API
            const isLargeFile = file.size > 100 * 1024 * 1024; // 100MB

            if (isLargeFile) {
                await handleLargeFileUpload(file, this);
            } else {
                await handleNormalFileUpload(this);
            }
        });

        // 处理大文件上传
        async function handleLargeFileUpload(file, form) {
            const startButton = document.getElementById('startConversion');
            const uploadContainer = document.getElementById('uploadProgressContainer');

            // 显示上传进度容器
            uploadContainer.style.display = 'block';

            // 更新UI
            startButton.disabled = true;
            startButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 上传中...';

            // 更新进度显示
            document.getElementById('uploadFileName').textContent = file.name;
            document.getElementById('totalSize').textContent = formatFileSize(file.size);

            try {
                const formData = new FormData();
                formData.append('videoFile', file);

                // 添加其他表单数据
                const formElements = new FormData(form);
                for (let [key, value] of formElements.entries()) {
                    if (key !== 'videoFile') {
                        formData.append(key, value);
                    }
                }

                const response = await fetch('/api/upload/large-file', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`上传失败 (${response.status}): ${errorText}`);
                }

                const result = await response.json();
                console.log('大文件上传结果:', result);

                if (result.success) {
                    // 上传和转换任务创建都成功了！
                    await handleConversionSuccess(result);
                    hideUploadProgress();
                } else {
                    throw new Error(result.message || '上传失败');
                }
            } catch (error) {
                console.error('大文件上传失败:', error);
                showAlert('danger', '上传失败: ' + error.message);
                hideUploadProgress();
            } finally {
                // 恢复按钮
                startButton.disabled = false;
                startButton.innerHTML = '<i class="fas fa-play"></i> 开始转换';
            }
        }

        // 处理普通文件上传（原有逻辑）
        async function handleNormalFileUpload(form) {
            const formData = new FormData(form);

            // 处理复选框值
            const checkboxes = ['twoPass', 'fastStart', 'copyTimestamps'];
            checkboxes.forEach(name => {
                const checkbox = document.getElementById(name);
                if (checkbox) {
                    formData.delete(name);
                    formData.append(name, checkbox.checked ? 'true' : 'false');
                }
            });

            // 处理deinterlace字段 - 转换为布尔值
            const deinterlaceSelect = document.getElementById('deinterlace');
            if (deinterlaceSelect) {
                formData.delete('deinterlace');
                // 如果选择了去隔行扫描方法（不是空值），则为true
                const deinterlaceValue = deinterlaceSelect.value && deinterlaceSelect.value !== '';
                formData.append('deinterlace', deinterlaceValue ? 'true' : 'false');
            }

            const startButton = document.getElementById('startConversion');
            startButton.disabled = true;
            startButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 上传中...';

            try {
                const response = await fetch('/api/conversion/start', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`转换启动失败 (${response.status}): ${errorText}`);
                }

                const result = await response.json();
                console.log('转换启动结果:', result);

                if (result.success) {
                    await handleConversionSuccess(result);
                } else {
                    throw new Error(result.message || '转换启动失败');
                }
            } catch (error) {
                console.error('转换启动失败:', error);
                showAlert('danger', '转换启动失败: ' + error.message);
            } finally {
                startButton.disabled = false;
                startButton.innerHTML = '<i class="fas fa-play"></i> 开始转换';
            }
        }



        // 处理转换成功
        async function handleConversionSuccess(result) {
            currentTaskId = result.taskId;
            console.log("🎯 设置当前任务ID:", currentTaskId);

            // 获取文件信息
            const fileInput = document.getElementById('videoFile');
            const outputFormat = document.getElementById('outputFormat').value;
            const taskData = {
                originalFileName: fileInput.files[0]?.name || result.fileName || '',
                outputFormat: outputFormat,
                fileSize: fileInput.files[0]?.size || result.fileSize || 0
            };

            showCurrentTask(result.taskName, taskData);

            // 加入任务组以接收进度更新
            if (connection.state === signalR.HubConnectionState.Connected) {
                await connection.invoke("JoinTaskGroup", currentTaskId);
                console.log("✅ 已加入任务组:", currentTaskId);
            } else {
                console.warn("⚠️ SignalR连接未建立，无法加入任务组");
                showAlert('warning', 'SignalR连接未建立，可能无法实时显示进度');
            }

            // 显示成功消息
            showAlert('success', `转换任务已创建: ${result.taskName}`);

            // 立即刷新最近任务列表
            setTimeout(loadRecentTasks, 500);
        }

        // 隐藏上传进度
        function hideUploadProgress() {
            const uploadContainer = document.getElementById('uploadProgressContainer');
            uploadContainer.style.display = 'none';

            // 重置进度条
            const progressBar = document.getElementById('uploadProgressBar');
            progressBar.style.width = '0%';
            progressBar.setAttribute('aria-valuenow', '0');

            document.getElementById('uploadPercentage').textContent = '0%';
            document.getElementById('uploadSpeed').textContent = '0 MB/s';
            document.getElementById('uploadTimeRemaining').textContent = '计算中...';
            document.getElementById('uploadedSize').textContent = '0 MB';
        }

        // 格式化文件大小
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // 格式化时间
        function formatTime(seconds) {
            if (seconds < 60) return Math.round(seconds) + '秒';
            if (seconds < 3600) return Math.round(seconds / 60) + '分钟';
            return Math.round(seconds / 3600) + '小时';
        }

        // 取消任务 - 改进版本
        document.getElementById('cancelTask').addEventListener('click', async function() {
            if (currentTaskId && confirm('确定要取消当前转换任务吗？\n\n⚠️ 这将立即终止FFmpeg进程并取消转换。')) {
                const button = this;
                const originalText = button.innerHTML;

                try {
                    button.disabled = true;
                    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 正在取消...';

                    console.log('🛑 发送取消请求:', currentTaskId);

                    // 调用REST API取消任务
                    const response = await fetch(`/api/conversion/cancel/${currentTaskId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    const result = await response.json();

                    if (result.success) {
                        showAlert('success', '✅ 任务取消成功！FFmpeg进程已终止。');
                        console.log('✅ 任务取消成功:', currentTaskId);

                        // 立即更新UI状态
                        updateTaskStatus('cancelled', '任务已取消');
                        updateTaskActionButtons('cancelled');

                        // 清除当前任务
                        currentTaskId = null;
                        hideCurrentTask();

                        // 刷新任务列表
                        setTimeout(loadRecentTasks, 1000);
                    } else {
                        throw new Error(result.message || '取消失败');
                    }
                } catch (error) {
                    console.error('❌ 取消任务失败:', error);
                    showAlert('danger', '❌ 取消任务失败: ' + error.message);
                } finally {
                    button.disabled = false;
                    button.innerHTML = originalText;
                }
            }
        });

        // 刷新任务状态
        document.getElementById('refreshTask').addEventListener('click', function() {
            refreshCurrentTask();
        });

        // 重新开始转换
        document.getElementById('restartTask').addEventListener('click', function() {
            // 隐藏当前任务显示
            document.getElementById('currentTask').style.display = 'none';
            document.getElementById('noTask').style.display = 'block';

            // 清除当前任务ID
            currentTaskId = null;
            currentTaskStartTime = null;

            // 显示提示信息
            showAlert('info', '请重新选择文件并配置转换参数');
        });

        // 预设选择变化时更新高级设置
        document.getElementById('preset').addEventListener('change', function() {
            updateAdvancedSettings(this.value);
            updateGpuAccelBadge(getVideoCodecFromPreset(this.value));
        });

        // 智能GPU预设选择
        async function initializeSmartPresetSelection() {
            try {
                console.log('🔍 开始智能GPU预设选择...');

                // 检查GPU能力
                const gpuResponse = await fetch('/api/gpu/capabilities');
                const gpuData = await gpuResponse.json();

                if (gpuData.success && gpuData.data) {
                    const capabilities = gpuData.data;
                    console.log('GPU能力检测结果:', capabilities);

                    // 如果支持NVENC，优先选择GPU预设
                    if (capabilities.nvidia && capabilities.nvidia.supported) {
                        selectBestGpuPreset('nvenc');
                        console.log('✅ 自动选择NVIDIA GPU预设');
                    }
                    // 如果支持QSV，选择Intel GPU预设
                    else if (capabilities.intel && capabilities.intel.supported) {
                        selectBestGpuPreset('qsv');
                        console.log('✅ 自动选择Intel GPU预设');
                    }
                    // 如果支持AMF，选择AMD GPU预设
                    else if (capabilities.amd && capabilities.amd.supported) {
                        selectBestGpuPreset('amf');
                        console.log('✅ 自动选择AMD GPU预设');
                    }
                    else {
                        console.log('ℹ️ 未检测到GPU支持，使用默认CPU预设');
                    }
                } else {
                    console.log('⚠️ GPU检测失败，使用默认预设');
                }
            } catch (error) {
                console.error('❌ 智能预设选择失败:', error);
            }
        }

        // 选择最佳GPU预设
        function selectBestGpuPreset(gpuType) {
            const presetSelect = document.getElementById('preset');
            const options = presetSelect.options;

            // 预设优先级映射
            const presetPriority = {
                'nvenc': [
                    'GPU Fast 1080p (NVENC)',
                    'GPU High Quality 1080p (NVENC)',
                    'GPU 4K Ultra (NVENC)'
                ],
                'qsv': [
                    'GPU Fast 1080p (QSV)',
                    'GPU High Quality 1080p (QSV)'
                ],
                'amf': [
                    'GPU Fast 1080p (AMF)',
                    'GPU High Quality 1080p (AMF)'
                ]
            };

            const preferredPresets = presetPriority[gpuType] || [];

            // 按优先级查找并选择预设
            for (const presetName of preferredPresets) {
                for (let i = 0; i < options.length; i++) {
                    if (options[i].value === presetName) {
                        presetSelect.selectedIndex = i;
                        updateAdvancedSettings(presetName);
                        updateGpuAccelBadge(getVideoCodecFromPreset(presetName));

                        // 显示GPU加速提示
                        showGpuAccelNotification(presetName);
                        return;
                    }
                }
            }
        }

        // 显示GPU加速通知
        function showGpuAccelNotification(presetName) {
            const notification = document.createElement('div');
            notification.className = 'alert alert-success alert-dismissible fade show mt-2';
            notification.innerHTML = `
                <i class="fas fa-rocket"></i>
                <strong>GPU加速已启用！</strong>
                已自动选择 "${presetName}" 预设，转换速度将显著提升。
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;

            const presetContainer = document.getElementById('preset').parentElement;
            presetContainer.appendChild(notification);

            // 3秒后自动隐藏
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.remove();
                }
            }, 5000);
        }

        // 从预设名称获取视频编码器
        function getVideoCodecFromPreset(presetName) {
            // 这里可以根据预设名称推断编码器
            if (presetName.includes('NVENC')) return 'h264_nvenc';
            if (presetName.includes('QSV')) return 'h264_qsv';
            if (presetName.includes('AMF')) return 'h264_amf';
            return 'libx264'; // 默认CPU编码器
        }

        // 分辨率选择处理
        document.getElementById('resolution').addEventListener('change', function() {
            const customResolution = document.getElementById('customResolution');
            if (this.value === 'custom') {
                customResolution.style.display = 'block';
            } else {
                customResolution.style.display = 'none';
            }
        });

        // 质量控制模式切换
        document.querySelectorAll('input[name="qualityMode"]').forEach(radio => {
            radio.addEventListener('change', function() {
                const crfSettings = document.getElementById('crfSettings');
                const bitrateSettings = document.getElementById('bitrateSettings');

                if (this.value === 'crf') {
                    crfSettings.style.display = 'block';
                    bitrateSettings.style.display = 'none';
                } else {
                    crfSettings.style.display = 'none';
                    bitrateSettings.style.display = 'block';
                }
            });
        });

        // 音频质量模式切换
        document.querySelectorAll('input[name="audioQualityMode"]').forEach(radio => {
            radio.addEventListener('change', function() {
                const bitrateSettings = document.getElementById('audioBitrateSettings');
                const qualitySettings = document.getElementById('audioQualitySettings');

                if (this.value === 'bitrate') {
                    bitrateSettings.style.display = 'block';
                    qualitySettings.style.display = 'none';
                } else {
                    bitrateSettings.style.display = 'none';
                    qualitySettings.style.display = 'block';
                }
            });
        });

        // 自定义音频比特率
        document.getElementById('audioBitrate').addEventListener('change', function() {
            const customBitrate = document.getElementById('customAudioBitrate');
            if (this.value === 'custom') {
                customBitrate.style.display = 'block';
            } else {
                customBitrate.style.display = 'none';
            }
        });

        // 滑块值更新
        document.getElementById('videoQuality').addEventListener('input', function() {
            document.getElementById('qualityValue').textContent = this.value;
        });

        document.getElementById('audioQualityValue').addEventListener('input', function() {
            document.getElementById('audioQualityDisplay').textContent = this.value;
        });

        document.getElementById('audioVolume').addEventListener('input', function() {
            document.getElementById('volumeValue').textContent = this.value;
        });

        // 输出格式变化时更新相关设置
        document.getElementById('outputFormat').addEventListener('change', function() {
            updateCodecOptions(this.value);
            toggleVideoSettings(this.value);
        });

        // 根据输出格式更新编解码器选项
        function updateCodecOptions(format) {
            const videoCodec = document.getElementById('videoCodec');
            const audioCodec = document.getElementById('audioCodec');

            // 清空现有选项
            videoCodec.innerHTML = '';
            audioCodec.innerHTML = '';

            // 根据格式添加相应的编解码器选项
            switch(format) {
                case 'mp4':
                case 'mp4_h265':
                    videoCodec.innerHTML = `
                        <option value="libx264">H.264 (x264) - CPU</option>
                        <option value="h264_nvenc">H.264 (NVENC) - NVIDIA GPU</option>
                        <option value="h264_qsv">H.264 (QSV) - Intel GPU</option>
                        <option value="h264_amf">H.264 (AMF) - AMD GPU</option>
                        <option value="libx265">H.265 (x265) - CPU</option>
                        <option value="hevc_nvenc">H.265 (NVENC) - NVIDIA GPU</option>
                        <option value="hevc_qsv">H.265 (QSV) - Intel GPU</option>
                        <option value="hevc_amf">H.265 (AMF) - AMD GPU</option>
                        <option value="mpeg4">MPEG-4</option>
                    `;
                    audioCodec.innerHTML = `
                        <option value="aac">AAC</option>
                        <option value="libmp3lame">MP3</option>
                        <option value="ac3">AC-3</option>
                    `;
                    break;
                case 'webm':
                    videoCodec.innerHTML = `
                        <option value="libvpx-vp9">VP9</option>
                        <option value="libvpx">VP8</option>
                        <option value="libaom-av1">AV1</option>
                    `;
                    audioCodec.innerHTML = `
                        <option value="libvorbis">Vorbis</option>
                        <option value="libopus">Opus</option>
                    `;
                    break;
                case 'avi':
                    videoCodec.innerHTML = `
                        <option value="libx264">H.264 (x264)</option>
                        <option value="mpeg4">MPEG-4</option>
                        <option value="libxvid">Xvid</option>
                    `;
                    audioCodec.innerHTML = `
                        <option value="libmp3lame">MP3</option>
                        <option value="aac">AAC</option>
                        <option value="ac3">AC-3</option>
                    `;
                    break;
                case 'mkv':
                    videoCodec.innerHTML = `
                        <option value="libx264">H.264 (x264) - CPU</option>
                        <option value="h264_nvenc">H.264 (NVENC) - NVIDIA GPU</option>
                        <option value="h264_qsv">H.264 (QSV) - Intel GPU</option>
                        <option value="h264_amf">H.264 (AMF) - AMD GPU</option>
                        <option value="libx265">H.265 (x265) - CPU</option>
                        <option value="hevc_nvenc">H.265 (NVENC) - NVIDIA GPU</option>
                        <option value="hevc_qsv">H.265 (QSV) - Intel GPU</option>
                        <option value="hevc_amf">H.265 (AMF) - AMD GPU</option>
                        <option value="libvpx-vp9">VP9</option>
                        <option value="libaom-av1">AV1</option>
                        <option value="av1_nvenc">AV1 (NVENC) - NVIDIA GPU</option>
                        <option value="av1_qsv">AV1 (QSV) - Intel GPU</option>
                        <option value="av1_amf">AV1 (AMF) - AMD GPU</option>
                    `;
                    audioCodec.innerHTML = `
                        <option value="aac">AAC</option>
                        <option value="libvorbis">Vorbis</option>
                        <option value="libopus">Opus</option>
                        <option value="flac">FLAC</option>
                    `;
                    break;
                case 'mov':
                    videoCodec.innerHTML = `
                        <option value="libx264">H.264 (x264)</option>
                        <option value="libx265">H.265 (x265)</option>
                        <option value="mpeg4">MPEG-4</option>
                    `;
                    audioCodec.innerHTML = `
                        <option value="aac">AAC</option>
                        <option value="libmp3lame">MP3</option>
                        <option value="pcm_s16le">PCM</option>
                    `;
                    break;
                default: // 音频格式
                    videoCodec.innerHTML = '<option value="">无 (仅音频)</option>';
                    if (format === 'mp3') {
                        audioCodec.innerHTML = '<option value="libmp3lame">MP3</option>';
                    } else if (format === 'aac') {
                        audioCodec.innerHTML = '<option value="aac">AAC</option>';
                    } else if (format === 'flac') {
                        audioCodec.innerHTML = '<option value="flac">FLAC</option>';
                    }
                    break;
            }
        }

        // 根据格式切换视频设置显示
        function toggleVideoSettings(format) {
            const videoPanel = document.getElementById('videoPanel');
            const isAudioOnly = ['mp3', 'aac', 'flac'].includes(format);

            if (isAudioOnly) {
                videoPanel.style.opacity = '0.5';
                videoPanel.style.pointerEvents = 'none';
            } else {
                videoPanel.style.opacity = '1';
                videoPanel.style.pointerEvents = 'auto';
            }
        }

        // 宽高比计算
        document.getElementById('aspectRatio').addEventListener('change', function() {
            const width = document.getElementById('customWidth');
            const height = document.getElementById('customHeight');

            if (this.value && width.value) {
                const ratios = {
                    '16:9': 16/9,
                    '4:3': 4/3,
                    '1:1': 1,
                    '21:9': 21/9
                };

                if (ratios[this.value]) {
                    height.value = Math.round(width.value / ratios[this.value]);
                }
            }
        });

        // 时间格式验证
        function validateTimeFormat(input) {
            const timePattern = /^([0-9]{2}):([0-9]{2}):([0-9]{2})$/;
            return timePattern.test(input.value);
        }

        document.getElementById('startTime').addEventListener('blur', function() {
            if (this.value && !validateTimeFormat(this)) {
                this.classList.add('is-invalid');
            } else {
                this.classList.remove('is-invalid');
            }
        });

        document.getElementById('duration').addEventListener('blur', function() {
            if (this.value && !validateTimeFormat(this)) {
                this.classList.add('is-invalid');
            } else {
                this.classList.remove('is-invalid');
            }
        });

        // 初始化编解码器选项
        updateCodecOptions(document.getElementById('outputFormat').value);

        // 更新进度显示
        function updateProgress(data) {
            console.log("📊 收到进度更新:", data);
            console.log("🔍 当前任务ID:", currentTaskId);
            console.log("🔍 进度数据任务ID:", data.taskId);

            if (data.taskId !== currentTaskId) {
                console.log("⚠️ 任务ID不匹配，忽略进度更新");
                console.log("⚠️ 当前任务ID:", currentTaskId);
                console.log("⚠️ 进度数据任务ID:", data.taskId);
                return;
            }

            const progressBar = document.getElementById('progressBar');
            const taskStatus = document.getElementById('taskStatus');
            const conversionSpeed = document.getElementById('conversionSpeed');
            const remainingTime = document.getElementById('remainingTime');
            const elapsedTime = document.getElementById('elapsedTime');

            // 更新进度条
            if (progressBar) {
                progressBar.style.width = data.progress + '%';
                progressBar.setAttribute('aria-valuenow', data.progress);
                progressBar.querySelector('span').textContent = data.progress + '%';

                // 根据进度调整进度条颜色
                if (data.progress >= 100) {
                    progressBar.className = 'progress-bar bg-success';
                } else if (data.progress >= 50) {
                    progressBar.className = 'progress-bar progress-bar-striped progress-bar-animated bg-primary';
                } else {
                    progressBar.className = 'progress-bar progress-bar-striped progress-bar-animated';
                }
            }

            // 更新状态信息 - 只有当有具体消息时才更新
            if (taskStatus && data.message) {
                taskStatus.textContent = data.message;
            }

            // 更新转换速度
            if (conversionSpeed && data.speed) {
                conversionSpeed.textContent = data.speed.toFixed(2) + 'x';
                conversionSpeed.className = data.speed > 1 ? 'fw-bold text-success' : 'fw-bold text-warning';
            }

            // 更新剩余时间
            if (remainingTime && data.remainingSeconds) {
                remainingTime.textContent = formatTime(data.remainingSeconds);
            }

            // 更新已用时间
            if (elapsedTime && currentTaskStartTime) {
                const elapsed = Math.floor((Date.now() - currentTaskStartTime) / 1000);
                elapsedTime.textContent = formatTime(elapsed);
            }

            // 更新最近任务列表中的进度
            updateRecentTaskProgress(data.taskId, data.progress, data.message);
        }

        // 上传进度更新防抖控制
        let uploadProgressUpdateTimeout = null;
        let lastUploadProgressData = null;

        // 更新上传进度显示 - 优化版本
        function updateUploadProgress(data) {
            console.log("📤 收到上传进度更新:", data);

            // 保存最新数据
            lastUploadProgressData = data;

            // 清除之前的更新计时器
            if (uploadProgressUpdateTimeout) {
                clearTimeout(uploadProgressUpdateTimeout);
            }

            // 立即更新关键信息（进度百分比）
            updateProgressBarImmediate(data);

            // 延迟更新其他信息（防抖）
            uploadProgressUpdateTimeout = setTimeout(() => {
                updateProgressDetails(lastUploadProgressData);
            }, 50); // 50ms防抖
        }

        // 立即更新进度条
        function updateProgressBarImmediate(data) {
            const uploadContainer = document.getElementById('uploadProgressContainer');
            if (uploadContainer.style.display === 'none') {
                uploadContainer.style.display = 'block';
            }

            const progressBar = document.getElementById('uploadProgressBar');
            const percentage = document.getElementById('uploadPercentage');

            if (progressBar) {
                // 使用CSS过渡实现平滑动画
                progressBar.style.transition = 'width 0.3s ease-out';
                progressBar.style.width = data.ProgressPercent + '%';
                progressBar.setAttribute('aria-valuenow', data.ProgressPercent);

                // 根据进度调整颜色
                if (data.ProgressPercent >= 100) {
                    progressBar.className = 'progress-bar bg-success';
                } else if (data.ProgressPercent >= 80) {
                    progressBar.className = 'progress-bar progress-bar-striped progress-bar-animated bg-info';
                } else {
                    progressBar.className = 'progress-bar progress-bar-striped progress-bar-animated bg-primary';
                }
            }

            if (percentage) {
                percentage.textContent = data.ProgressPercent + '%';
            }
        }

        // 更新详细信息
        function updateProgressDetails(data) {
            if (!data) return;

            const speed = document.getElementById('uploadSpeed');
            const timeRemaining = document.getElementById('uploadTimeRemaining');
            const uploadedSize = document.getElementById('uploadedSize');
            const fileName = document.getElementById('uploadFileName');
            const uploadContainer = document.getElementById('uploadProgressContainer');

            // 检测高速上传（超过100MB/s）
            const isHighSpeed = data.Speed && data.Speed > 100 * 1024 * 1024;
            if (isHighSpeed) {
                uploadContainer.classList.add('high-speed-upload');
            } else {
                uploadContainer.classList.remove('high-speed-upload');
            }

            // 使用后端格式化的数据（如果可用）
            if (speed) {
                if (data.SpeedFormatted) {
                    speed.textContent = data.SpeedFormatted;
                    // 高速上传时添加特殊标识
                    if (isHighSpeed) {
                        speed.innerHTML = `🚀 ${data.SpeedFormatted}`;
                        speed.className = 'text-success fw-bold';
                    } else {
                        speed.className = '';
                    }
                } else if (data.Speed) {
                    const speedText = formatFileSize(data.Speed) + '/s';
                    speed.textContent = speedText;
                    if (isHighSpeed) {
                        speed.innerHTML = `🚀 ${speedText}`;
                        speed.className = 'text-success fw-bold';
                    } else {
                        speed.className = '';
                    }
                } else {
                    speed.textContent = '计算中...';
                    speed.className = '';
                }
            }

            if (timeRemaining) {
                if (data.TimeRemainingFormatted) {
                    timeRemaining.textContent = data.TimeRemainingFormatted;
                } else if (data.EstimatedTimeRemaining && data.EstimatedTimeRemaining > 0) {
                    timeRemaining.textContent = formatTime(data.EstimatedTimeRemaining);
                } else {
                    timeRemaining.textContent = '计算中...';
                }
            }

            if (uploadedSize) {
                uploadedSize.textContent = formatFileSize(data.UploadedSize);
            }

            if (fileName && data.FileName) {
                fileName.textContent = data.FileName;
            }
        }

        // 更新任务状态
        function updateTaskStatus(data) {
            console.log("📋 收到状态更新:", data);
            console.log("🔍 当前任务ID:", currentTaskId);
            console.log("🔍 状态数据任务ID:", data.taskId);

            if (data.taskId !== currentTaskId) {
                console.log("⚠️ 任务ID不匹配，忽略状态更新");
                console.log("⚠️ 当前任务ID:", currentTaskId);
                console.log("⚠️ 状态数据任务ID:", data.taskId);
                return;
            }

            const taskStatus = document.getElementById('taskStatus');
            const statusAlert = taskStatus?.closest('.alert');

            if (taskStatus) {
                // 根据状态设置友好的中文显示文本
                let statusText = '';
                switch (data.status) {
                    case 'Converting':
                        statusText = '转换中...';
                        break;
                    case 'Completed':
                        statusText = '转换完成';
                        break;
                    case 'Failed':
                        statusText = '转换失败';
                        break;
                    case 'Cancelled':
                        statusText = '已取消';
                        break;
                    case 'Pending':
                        statusText = '等待中...';
                        break;
                    default:
                        statusText = data.status || '状态未知';
                }

                taskStatus.textContent = statusText;

                // 根据状态更新样式
                if (statusAlert) {
                    statusAlert.className = 'alert mb-3';
                    switch (data.status) {
                        case 'Converting':
                            statusAlert.classList.add('alert-info');
                            break;
                        case 'Completed':
                            statusAlert.classList.add('alert-success');
                            break;
                        case 'Failed':
                            statusAlert.classList.add('alert-danger');
                            break;
                        case 'Cancelled':
                            statusAlert.classList.add('alert-warning');
                            break;
                        default:
                            statusAlert.classList.add('alert-secondary');
                    }
                }

                if (data.errorMessage) {
                    taskStatus.textContent += ' - ' + data.errorMessage;
                }
            }

            // 更新最近任务列表中的状态
            updateRecentTaskStatus(data.taskId, data.status);
        }

        // 处理任务完成
        function handleTaskCompleted(data) {
            console.log("🎉 任务完成:", data);

            if (data.taskId !== currentTaskId) {
                console.log("⚠️ 任务ID不匹配，忽略完成通知");
                return;
            }

            const progressBar = document.getElementById('progressBar');
            const taskStatus = document.getElementById('taskStatus');
            const cancelButton = document.getElementById('cancelTask');
            const refreshButton = document.getElementById('refreshTask');

            if (data.success) {
                // 成功完成
                if (progressBar) {
                    progressBar.className = 'progress-bar bg-success';
                    progressBar.style.width = '100%';
                    progressBar.setAttribute('aria-valuenow', 100);
                    progressBar.querySelector('span').textContent = '完成!';
                }

                if (taskStatus) {
                    taskStatus.textContent = '转换完成！文件已准备好下载。';
                    const statusAlert = taskStatus.closest('.alert');
                    if (statusAlert) {
                        statusAlert.className = 'alert alert-success mb-3';
                    }
                }



                // 显示成功通知
                showAlert('success', `任务 "${data.taskName}" 转换完成！`);
            } else {
                // 转换失败
                if (progressBar) {
                    progressBar.className = 'progress-bar bg-danger';
                    progressBar.style.width = '100%';
                    progressBar.querySelector('span').textContent = '失败';
                }

                if (taskStatus) {
                    taskStatus.textContent = '转换失败: ' + (data.errorMessage || '未知错误');
                    const statusAlert = taskStatus.closest('.alert');
                    if (statusAlert) {
                        statusAlert.className = 'alert alert-danger mb-3';
                    }
                }

                // 显示详细错误信息
                showErrorDetails(data.ErrorMessage || '未知错误');

                // 显示错误通知
                showAlert('danger', `任务 "${data.TaskName}" 转换失败: ${data.ErrorMessage || '未知错误'}`);
            }

            // 更新操作按钮
            updateTaskActionButtons(data.success ? 'completed' : 'failed', data.taskId);

            // 立即更新最近任务列表中的状态
            if (data.success) {
                updateRecentTaskStatus(data.taskId, 'Completed');
            } else {
                updateRecentTaskStatus(data.taskId, 'Failed');
            }

            // 清除当前任务ID
            currentTaskId = null;
            currentTaskStartTime = null;

            // 延迟刷新整个任务列表以确保数据库已更新
            setTimeout(loadRecentTasks, 1000);
        }

        // 更新任务操作按钮
        function updateTaskActionButtons(state, taskId = null) {
            const cancelButton = document.getElementById('cancelTask');
            const refreshButton = document.getElementById('refreshTask');
            const downloadButton = document.getElementById('downloadTask');
            const restartButton = document.getElementById('restartTask');

            // 隐藏所有按钮
            if (cancelButton) cancelButton.style.display = 'none';
            if (refreshButton) refreshButton.style.display = 'none';
            if (downloadButton) downloadButton.style.display = 'none';
            if (restartButton) restartButton.style.display = 'none';

            switch (state) {
                case 'converting':
                    // 转换中：显示取消按钮
                    if (cancelButton) cancelButton.style.display = 'inline-block';
                    break;

                case 'completed':
                    // 转换完成：显示下载和重新开始按钮
                    if (downloadButton && taskId) {
                        downloadButton.href = `/api/conversion/download/${taskId}`;
                        downloadButton.style.display = 'inline-block';
                    }
                    if (restartButton) restartButton.style.display = 'inline-block';
                    if (refreshButton) refreshButton.style.display = 'inline-block';
                    break;

                case 'failed':
                    // 转换失败：显示重新开始和刷新按钮
                    if (restartButton) restartButton.style.display = 'inline-block';
                    if (refreshButton) refreshButton.style.display = 'inline-block';
                    break;

                case 'cancelled':
                    // 转换取消：显示重新开始和刷新按钮
                    if (restartButton) restartButton.style.display = 'inline-block';
                    if (refreshButton) refreshButton.style.display = 'inline-block';
                    break;

                default:
                    // 默认状态：只显示刷新按钮
                    if (refreshButton) refreshButton.style.display = 'inline-block';
                    break;
            }
        }

        let currentTaskStartTime = null;

        // 显示当前任务
        function showCurrentTask(taskName, taskData = null) {
            console.log("📝 显示当前任务:", taskName, taskData);

            currentTaskStartTime = Date.now();

            document.getElementById('noTask').style.display = 'none';
            document.getElementById('currentTask').style.display = 'block';
            document.getElementById('currentTaskName').textContent = taskName;

            // 显示任务ID
            if (currentTaskId) {
                document.getElementById('taskId').textContent = `ID: ${currentTaskId.substring(0, 8)}...`;
            }

            // 显示文件信息
            if (taskData) {
                const fileInfo = document.getElementById('fileInfo');
                const originalFileName = document.getElementById('originalFileName');
                const outputFormat = document.getElementById('outputFormat');
                const fileSize = document.getElementById('fileSize');

                if (taskData.originalFileName) {
                    originalFileName.textContent = taskData.originalFileName;
                    fileInfo.style.display = 'block';
                }

                if (taskData.outputFormat) {
                    outputFormat.textContent = taskData.outputFormat.toUpperCase();
                }

                if (taskData.fileSize) {
                    fileSize.textContent = formatFileSize(taskData.fileSize);
                }

                // 显示转换参数详情
                showConversionDetails(taskData);
            }

            // 重置进度条
            const progressBar = document.getElementById('progressBar');
            progressBar.className = 'progress-bar progress-bar-striped progress-bar-animated';
            progressBar.style.width = '0%';
            progressBar.setAttribute('aria-valuenow', 0);
            progressBar.querySelector('span').textContent = '0%';

            // 重置状态信息
            document.getElementById('taskStatus').textContent = '准备中...';
            const statusAlert = document.getElementById('taskStatus').closest('.alert');
            if (statusAlert) {
                statusAlert.className = 'alert alert-info mb-3';
            }

            // 重置其他信息
            document.getElementById('conversionSpeed').textContent = '-';
            document.getElementById('remainingTime').textContent = '-';
            document.getElementById('elapsedTime').textContent = '-';

            // 设置按钮为转换中状态
            updateTaskActionButtons('converting');

            // 隐藏错误详情
            hideErrorDetails();
        }

        // 格式化文件大小
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 B';
            const k = 1024;
            const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // 格式化时间（秒转换为HH:MM:SS）
        function formatTime(seconds) {
            if (!seconds || seconds <= 0) return '-';

            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const secs = Math.floor(seconds % 60);

            if (hours > 0) {
                return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
            } else {
                return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
            }
        }

        // 更新最近任务列表中的进度
        function updateRecentTaskProgress(taskId, progress, message) {
            const taskElement = document.querySelector(`[data-task-id="${taskId}"]`);
            if (taskElement) {
                // 更新进度文本
                const progressElement = taskElement.querySelector('.task-progress');
                if (progressElement) {
                    progressElement.textContent = `${progress}%`;
                    progressElement.className = `task-progress ms-2 text-${progress >= 100 ? 'success' : 'primary'}`;
                }

                // 更新进度条
                const progressBar = taskElement.querySelector('.progress-bar');
                if (progressBar) {
                    progressBar.style.width = `${progress}%`;
                    progressBar.className = `progress-bar ${progress >= 100 ? 'bg-success' : 'bg-primary'}`;
                }

                // 更新状态图标
                const statusIcon = taskElement.querySelector('.status-icon');
                if (statusIcon && progress < 100) {
                    statusIcon.className = `fas fa-spinner fa-spin status-icon text-primary`;
                }

                console.log(`📊 已更新任务 ${taskId} 进度: ${progress}%`);
            } else {
                console.log(`⚠️ 未找到任务元素: ${taskId}，刷新任务列表`);
                // 如果找不到任务元素，刷新整个列表
                setTimeout(loadRecentTasks, 500);
            }
        }

        // 更新最近任务列表中的状态
        function updateRecentTaskStatus(taskId, status) {
            const taskElement = document.querySelector(`[data-task-id="${taskId}"]`);
            if (taskElement) {
                // 更新状态徽章
                const statusBadge = taskElement.querySelector('.badge.task-status');
                if (statusBadge) {
                    statusBadge.textContent = getStatusText(status);
                    statusBadge.className = `badge ${getStatusClass(status)} task-status`;
                }

                // 更新状态图标
                const statusIcon = taskElement.querySelector('.status-icon');
                if (statusIcon) {
                    statusIcon.className = `fas fa-${getStatusIcon(status)} status-icon text-${getStatusColor(status)}`;
                }

                // 根据状态更新操作按钮
                const btnGroup = taskElement.querySelector('.btn-group-vertical');
                if (btnGroup) {
                    let buttonsHtml = '';

                    if (status === 'Completed') {
                        buttonsHtml = `
                            <a href="/api/conversion/download/${taskId}"
                               class="btn btn-sm btn-outline-success"
                               title="下载转换后的文件">
                                <i class="fas fa-download"></i>
                            </a>
                        `;
                    } else if (status === 'Converting' || status === 'Pending') {
                        buttonsHtml = `
                            <button class="btn btn-sm btn-outline-info"
                                    onclick="viewTaskDetails('${taskId}')"
                                    title="查看详情">
                                <i class="fas fa-eye"></i>
                            </button>
                        `;
                    }

                    btnGroup.innerHTML = buttonsHtml;
                }

                console.log(`📋 已更新任务 ${taskId} 状态: ${status}`);
            } else {
                console.log(`⚠️ 未找到任务元素: ${taskId}，刷新任务列表`);
                // 如果找不到任务元素，刷新整个列表
                setTimeout(loadRecentTasks, 500);
            }
        }

        // 显示转换参数详情
        function showConversionDetails(taskData) {
            const detailsAccordion = document.getElementById('taskDetailsAccordion');

            // 从表单获取当前设置
            const formData = {
                videoCodec: document.getElementById('videoCodec')?.value || '-',
                resolution: document.getElementById('resolution')?.value || '保持原始',
                videoQuality: document.getElementById('videoQuality')?.value || '-',
                frameRate: document.getElementById('frameRate')?.value || '保持原始',
                audioCodec: document.getElementById('audioCodec')?.value || '-',
                audioBitrate: document.getElementById('audioBitrate')?.value || '-',
                audioChannels: document.getElementById('audioChannels')?.value || '保持原始',
                sampleRate: document.getElementById('sampleRate')?.value || '保持原始',
                encodingPreset: document.getElementById('encodingPreset')?.value || 'medium',
                twoPass: document.getElementById('twoPass')?.checked || false,
                fastStart: document.getElementById('fastStart')?.checked || false,
                customParams: document.getElementById('customParams')?.value || ''
            };

            // 更新详情显示
            document.getElementById('videoCodecDetail').textContent = getCodecDisplayName(formData.videoCodec);
            document.getElementById('resolutionDetail').textContent = formData.resolution === 'custom' ?
                `${document.getElementById('customWidth')?.value || '?'}x${document.getElementById('customHeight')?.value || '?'}` :
                (formData.resolution || '保持原始');

            // 质量显示
            const qualityMode = document.querySelector('input[name="qualityMode"]:checked')?.value;
            if (qualityMode === 'crf') {
                document.getElementById('qualityDetail').textContent = `CRF ${formData.videoQuality}`;
            } else {
                const bitrate = document.getElementById('videoBitrate')?.value;
                document.getElementById('qualityDetail').textContent = bitrate ? `${bitrate} kbps` : '-';
            }

            document.getElementById('frameRateDetail').textContent = formData.frameRate || '保持原始';
            document.getElementById('audioCodecDetail').textContent = getCodecDisplayName(formData.audioCodec);

            // 音频比特率显示
            const audioBitrate = formData.audioBitrate === 'custom' ?
                document.getElementById('customAudioBitrateValue')?.value + ' kbps' :
                formData.audioBitrate;
            document.getElementById('audioBitrateDetail').textContent = audioBitrate || '-';

            document.getElementById('audioChannelsDetail').textContent = getChannelsDisplayName(formData.audioChannels);
            document.getElementById('sampleRateDetail').textContent = getSampleRateDisplayName(formData.sampleRate);
            document.getElementById('encodingPresetDetail').textContent = formData.encodingPreset;
            document.getElementById('twoPassDetail').textContent = formData.twoPass ? '是' : '否';
            document.getElementById('fastStartDetail').textContent = formData.fastStart ? '是' : '否';

            // 自定义参数
            const customParamsDetail = document.getElementById('customParamsDetail');
            if (formData.customParams) {
                customParamsDetail.style.display = 'block';
                customParamsDetail.querySelector('code').textContent = formData.customParams;
            } else {
                customParamsDetail.style.display = 'none';
            }

            detailsAccordion.style.display = 'block';
        }

        // 获取编解码器显示名称
        function getCodecDisplayName(codec) {
            const codecNames = {
                'libx264': 'H.264 (x264)',
                'libx265': 'H.265 (x265)',
                'libvpx-vp9': 'VP9',
                'libvpx': 'VP8',
                'libaom-av1': 'AV1',
                'mpeg4': 'MPEG-4',
                'aac': 'AAC',
                'libmp3lame': 'MP3',
                'libvorbis': 'Vorbis',
                'libopus': 'Opus',
                'flac': 'FLAC',
                'ac3': 'AC-3'
            };
            return codecNames[codec] || codec || '-';
        }

        // 获取声道显示名称
        function getChannelsDisplayName(channels) {
            const channelNames = {
                '1': '单声道 (1.0)',
                '2': '立体声 (2.0)',
                '6': '5.1环绕声',
                '8': '7.1环绕声'
            };
            return channelNames[channels] || channels || '保持原始';
        }

        // 获取采样率显示名称
        function getSampleRateDisplayName(sampleRate) {
            if (!sampleRate) return '保持原始';
            const rate = parseInt(sampleRate);
            if (rate >= 1000) {
                return `${rate / 1000} kHz`;
            }
            return `${rate} Hz`;
        }

        // 显示错误详情
        function showErrorDetails(errorMessage) {
            const errorDetails = document.getElementById('errorDetails');
            const errorMessageElement = document.getElementById('errorMessage');

            errorMessageElement.textContent = errorMessage;
            errorDetails.style.display = 'block';

            // 生成故障排除建议
            generateTroubleshootingTips(errorMessage);
        }

        // 隐藏错误详情
        function hideErrorDetails() {
            document.getElementById('errorDetails').style.display = 'none';
            document.getElementById('troubleshootingTips').style.display = 'none';
        }

        // 复制错误信息到剪贴板
        async function copyErrorToClipboard() {
            const errorMessage = document.getElementById('errorMessage').textContent;
            try {
                await navigator.clipboard.writeText(errorMessage);
                showAlert('success', '错误信息已复制到剪贴板');
            } catch (err) {
                console.error('复制失败:', err);
                showAlert('danger', '复制失败，请手动选择文本复制');
            }
        }

        // 显示故障排除提示
        function showTroubleshooting() {
            const troubleshootingTips = document.getElementById('troubleshootingTips');
            troubleshootingTips.style.display = troubleshootingTips.style.display === 'none' ? 'block' : 'none';
        }

        // 生成故障排除建议
        function generateTroubleshootingTips(errorMessage) {
            const troubleshootingList = document.getElementById('troubleshootingList');
            const tips = [];

            const lowerError = errorMessage.toLowerCase();

            if (lowerError.includes('ffmpeg')) {
                tips.push('检查FFmpeg是否正确安装并在系统PATH中');
                tips.push('确认FFmpeg版本兼容性');
                tips.push('尝试重新安装FFmpeg');
            }

            if (lowerError.includes('file') || lowerError.includes('not found')) {
                tips.push('检查输入文件是否存在且可访问');
                tips.push('确认文件路径正确');
                tips.push('检查文件权限设置');
            }

            if (lowerError.includes('codec') || lowerError.includes('format')) {
                tips.push('尝试使用不同的编解码器');
                tips.push('检查输入文件格式是否支持');
                tips.push('尝试使用默认转换预设');
            }

            if (lowerError.includes('memory') || lowerError.includes('space')) {
                tips.push('检查系统内存使用情况');
                tips.push('确认磁盘空间充足');
                tips.push('尝试降低视频质量设置');
            }

            if (lowerError.includes('permission') || lowerError.includes('access')) {
                tips.push('检查文件和目录权限');
                tips.push('以管理员权限运行应用程序');
                tips.push('确认防病毒软件未阻止操作');
            }

            if (tips.length === 0) {
                tips.push('检查输入文件是否完整且未损坏');
                tips.push('尝试使用不同的转换设置');
                tips.push('查看详细日志获取更多信息');
                tips.push('联系技术支持获取帮助');
            }

            troubleshootingList.innerHTML = tips.map(tip => `<li>${tip}</li>`).join('');
        }

        // 显示下载按钮
        function showDownloadButton(taskId) {
            const cancelButton = document.getElementById('cancelTask');
            cancelButton.outerHTML = `
                <a href="/api/conversion/download/${taskId}" class="btn btn-success btn-sm">
                    <i class="fas fa-download"></i> 下载文件
                </a>
            `;
        }

        // 格式化时间
        function formatTime(seconds) {
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const secs = seconds % 60;

            if (hours > 0) {
                return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
            } else {
                return `${minutes}:${secs.toString().padStart(2, '0')}`;
            }
        }

        // 更新高级设置 - 支持预设参数修改
        function updateAdvancedSettings(presetName) {
            console.log('🔧 更新高级设置:', presetName);

            // 预设配置映射
            const presetConfigs = {
                // CPU预设
                'Fast 1080p30': {
                    videoCodec: 'libx264',
                    audioCodec: 'aac',
                    videoQuality: '23',
                    audioQuality: '128k',
                    resolution: '1920x1080',
                    frameRate: '30',
                    outputFormat: 'mp4'
                },
                'High Quality 1080p': {
                    videoCodec: 'libx264',
                    audioCodec: 'aac',
                    videoQuality: '18',
                    audioQuality: '192k',
                    resolution: '1920x1080',
                    frameRate: '',
                    outputFormat: 'mp4'
                },
                'Web Optimized': {
                    videoCodec: 'libx264',
                    audioCodec: 'aac',
                    videoQuality: '25',
                    audioQuality: '128k',
                    resolution: '1280x720',
                    frameRate: '',
                    outputFormat: 'mp4'
                },

                // GPU预设 - NVIDIA NVENC
                'GPU Fast 1080p (NVENC)': {
                    videoCodec: 'h264_nvenc',
                    audioCodec: 'aac',
                    videoQuality: '23',
                    audioQuality: '128k',
                    resolution: '1920x1080',
                    frameRate: '30',
                    outputFormat: 'mp4'
                },
                'GPU High Quality 1080p (NVENC)': {
                    videoCodec: 'h264_nvenc',
                    audioCodec: 'aac',
                    videoQuality: '18',
                    audioQuality: '192k',
                    resolution: '1920x1080',
                    frameRate: '',
                    outputFormat: 'mp4'
                },
                'GPU 4K Ultra (NVENC)': {
                    videoCodec: 'hevc_nvenc',
                    audioCodec: 'aac',
                    videoQuality: '20',
                    audioQuality: '256k',
                    resolution: '3840x2160',
                    frameRate: '',
                    outputFormat: 'mp4'
                },

                // GPU预设 - Intel QSV
                'GPU Fast 1080p (QSV)': {
                    videoCodec: 'h264_qsv',
                    audioCodec: 'aac',
                    videoQuality: '23',
                    audioQuality: '128k',
                    resolution: '1920x1080',
                    frameRate: '30',
                    outputFormat: 'mp4'
                },

                // GPU预设 - AMD AMF
                'GPU Fast 1080p (AMF)': {
                    videoCodec: 'h264_amf',
                    audioCodec: 'aac',
                    videoQuality: '23',
                    audioQuality: '128k',
                    resolution: '1920x1080',
                    frameRate: '30',
                    outputFormat: 'mp4'
                }
            };

            const config = presetConfigs[presetName];
            if (!config) {
                console.log('⚠️ 未找到预设配置:', presetName);
                return;
            }

            // 更新表单字段（但保持可编辑状态）
            updateFormField('videoCodec', config.videoCodec);
            updateFormField('audioCodec', config.audioCodec);
            updateFormField('videoQuality', config.videoQuality);
            updateFormField('audioQuality', config.audioQuality);
            updateFormField('resolution', config.resolution);
            updateFormField('frameRate', config.frameRate);
            updateFormField('outputFormat', config.outputFormat);

            // 显示预设应用提示
            showPresetAppliedNotification(presetName, config);

            console.log('✅ 预设配置已应用:', config);
        }

        // 更新表单字段（保持可编辑）
        function updateFormField(fieldId, value) {
            const field = document.getElementById(fieldId);
            if (field && value !== undefined && value !== '') {
                field.value = value;

                // 添加视觉提示表示字段已被预设更新
                field.classList.add('preset-updated');

                // 2秒后移除提示样式
                setTimeout(() => {
                    field.classList.remove('preset-updated');
                }, 2000);

                // 触发change事件以更新其他相关UI
                field.dispatchEvent(new Event('change'));
            }
        }

        // 显示预设应用通知
        function showPresetAppliedNotification(presetName, config) {
            const isGpuPreset = config.videoCodec.includes('nvenc') ||
                               config.videoCodec.includes('qsv') ||
                               config.videoCodec.includes('amf');

            const icon = isGpuPreset ? 'fas fa-rocket' : 'fas fa-cog';
            const type = isGpuPreset ? 'success' : 'info';
            const message = isGpuPreset ?
                `GPU加速预设 "${presetName}" 已应用` :
                `预设 "${presetName}" 已应用`;

            showAlert(type, `<i class="${icon}"></i> ${message}，参数可以继续调整。`);
        }

        // 加载最近任务
        async function loadRecentTasks() {
            try {
                lastRefreshTime = Date.now();
                console.log("🔄 加载最近任务...");
                const response = await fetch('/api/conversion/recent?count=5');

                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }

                const tasks = await response.json();
                console.log("📋 获取到任务:", tasks);

                const container = document.getElementById('recentTasks');
                if (!tasks || tasks.length === 0) {
                    container.innerHTML = `
                        <div class="text-center text-muted py-3">
                            <i class="fas fa-inbox fa-2x mb-2"></i>
                            <div><small>暂无任务记录</small></div>
                        </div>
                    `;
                    return;
                }

                let html = '';
                tasks.forEach(task => {
                    const statusClass = getStatusClass(task.status);
                    const createdTime = new Date(task.createdAt).toLocaleString('zh-CN', {
                        month: '2-digit',
                        day: '2-digit',
                        hour: '2-digit',
                        minute: '2-digit'
                    });

                    const isActive = task.status === 1 || task.status === 0; // 1=Converting, 0=Pending
                    const progressInfo = isActive && task.progress ? `${task.progress}%` : '';

                    html += `
                        <div class="card mb-2 task-card" data-task-id="${task.id}">
                            <div class="card-body p-3">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div class="flex-grow-1">
                                        <div class="d-flex align-items-center mb-1">
                                            <i class="fas fa-${getStatusIcon(task.status)} status-icon text-${getStatusColor(task.status)}"></i>
                                            <div class="fw-bold text-truncate" style="max-width: 150px;" title="${task.taskName}">
                                                ${task.taskName}
                                            </div>
                                        </div>
                                        <small class="text-muted d-block">
                                            <i class="fas fa-file"></i> ${task.originalFileName || '未知文件'}
                                        </small>
                                        <div class="mt-2">
                                            <small class="text-muted">
                                                <i class="fas fa-clock"></i> ${createdTime}
                                            </small>
                                            ${progressInfo ? `
                                                <div class="progress mt-1" style="height: 4px;">
                                                    <div class="progress-bar bg-primary" style="width: ${task.progress}%"></div>
                                                </div>
                                                <small class="task-progress text-primary">${progressInfo}</small>
                                            ` : ''}
                                        </div>
                                    </div>
                                    <div class="text-end">
                                        <span class="badge ${statusClass} task-status mb-2">${getStatusText(task.status)}</span>
                                        <div class="btn-group-vertical" role="group">
                                            ${task.status === 2 ? `
                                                <a href="/api/conversion/download/${task.id}"
                                                   class="btn btn-sm btn-outline-success"
                                                   title="下载转换后的文件">
                                                    <i class="fas fa-download"></i>
                                                </a>
                                            ` : ''}
                                            ${isActive ? `
                                                <button class="btn btn-sm btn-outline-info"
                                                        onclick="viewTaskDetails('${task.id}')"
                                                        title="查看详情">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                            ` : ''}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                });

                container.innerHTML = html;
                console.log("✅ 最近任务加载完成");
            } catch (error) {
                console.error('❌ 加载最近任务失败:', error);
                const container = document.getElementById('recentTasks');
                container.innerHTML = `
                    <div class="text-center text-danger py-3">
                        <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
                        <div><small>加载失败: ${error.message}</small></div>
                        <button class="btn btn-sm btn-outline-primary mt-2" onclick="loadRecentTasks()">
                            <i class="fas fa-retry"></i> 重试
                        </button>
                    </div>
                `;
            }
        }

        // 获取状态样式类
        function getStatusClass(status) {
            // 支持数字和字符串状态
            switch (status) {
                case 2:
                case 'Completed': return 'bg-success';
                case 3:
                case 'Failed': return 'bg-danger';
                case 1:
                case 'Converting': return 'bg-primary';
                case 0:
                case 'Pending': return 'bg-warning text-dark';
                case 4:
                case 'Cancelled': return 'bg-secondary';
                default: return 'bg-secondary';
            }
        }

        // 获取状态文本
        function getStatusText(status) {
            // 支持数字和字符串状态
            switch (status) {
                case 2:
                case 'Completed': return '已完成';
                case 3:
                case 'Failed': return '失败';
                case 1:
                case 'Converting': return '转换中';
                case 0:
                case 'Pending': return '等待中';
                case 4:
                case 'Cancelled': return '已取消';
                default: return '未知';
            }
        }

        // 获取状态图标
        function getStatusIcon(status) {
            // 支持数字和字符串状态
            switch (status) {
                case 2:
                case 'Completed': return 'check-circle';
                case 3:
                case 'Failed': return 'times-circle';
                case 1:
                case 'Converting': return 'spinner fa-spin';
                case 0:
                case 'Pending': return 'clock';
                case 4:
                case 'Cancelled': return 'ban';
                default: return 'question-circle';
            }
        }

        // 获取状态颜色
        function getStatusColor(status) {
            // 支持数字和字符串状态
            switch (status) {
                case 2:
                case 'Completed': return 'success';
                case 3:
                case 'Failed': return 'danger';
                case 1:
                case 'Converting': return 'primary';
                case 0:
                case 'Pending': return 'warning';
                case 4:
                case 'Cancelled': return 'secondary';
                default: return 'muted';
            }
        }

        // 查看任务详情
        async function viewTaskDetails(taskId) {
            try {
                if (connection.state === signalR.HubConnectionState.Connected) {
                    await connection.invoke("GetTaskStatus", taskId);
                } else {
                    showAlert('warning', 'SignalR连接未建立，无法获取实时状态');
                }
            } catch (error) {
                console.error('获取任务详情失败:', error);
                showAlert('danger', '获取任务详情失败: ' + error.message);
            }
        }

        // 刷新当前任务状态
        async function refreshCurrentTask() {
            if (currentTaskId && connection.state === signalR.HubConnectionState.Connected) {
                try {
                    await connection.invoke("GetTaskStatus", currentTaskId);
                    showAlert('info', '正在刷新任务状态...');
                } catch (error) {
                    console.error('刷新任务状态失败:', error);
                    showAlert('danger', '刷新失败: ' + error.message);
                }
            }
        }

        // 文件拖拽功能
        function initializeFileDragDrop() {
            const dropZone = document.getElementById('fileDropZone');
            const fileInput = document.getElementById('videoFile');
            const selectedFileInfo = document.getElementById('selectedFileInfo');
            const selectedFileName = document.getElementById('selectedFileName');
            const selectedFileSize = document.getElementById('selectedFileSize');

            // 防止默认拖拽行为
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropZone.addEventListener(eventName, preventDefaults, false);
                document.body.addEventListener(eventName, preventDefaults, false);
            });

            // 高亮拖拽区域
            ['dragenter', 'dragover'].forEach(eventName => {
                dropZone.addEventListener(eventName, highlight, false);
            });

            ['dragleave', 'drop'].forEach(eventName => {
                dropZone.addEventListener(eventName, unhighlight, false);
            });

            // 处理文件拖拽
            dropZone.addEventListener('drop', handleDrop, false);

            // 点击选择文件
            dropZone.addEventListener('click', (e) => {
                // 如果点击的是文件输入框本身，不要重复触发
                if (e.target !== fileInput) {
                    fileInput.click();
                }
            });

            // 文件选择变化
            fileInput.addEventListener('change', handleFileSelect);

            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }

            function highlight() {
                dropZone.classList.add('dragover');
            }

            function unhighlight() {
                dropZone.classList.remove('dragover');
            }

            function handleDrop(e) {
                const dt = e.dataTransfer;
                const files = dt.files;

                if (files.length > 0) {
                    fileInput.files = files;
                    handleFileSelect();
                }
            }

            function handleFileSelect() {
                const file = fileInput.files[0];
                if (file) {
                    selectedFileName.textContent = file.name;
                    selectedFileSize.textContent = formatFileSize(file.size);
                    selectedFileInfo.style.display = 'block';

                    // 验证文件类型
                    const allowedExtensions = [@Html.Raw(string.Join(",", Model.SupportedExtensions.Select(ext => $"'{ext}'")))];
                    const fileExtension = '.' + file.name.split('.').pop().toLowerCase();

                    if (!allowedExtensions.includes(fileExtension)) {
                        showAlert('danger', `不支持的文件格式: ${fileExtension}`);
                        fileInput.value = '';
                        selectedFileInfo.style.display = 'none';
                        return;
                    }

                    // 验证文件大小
                    const maxSize = @Model.MaxFileSize;
                    if (file.size > maxSize) {
                        showAlert('danger', `文件大小超过限制: ${formatFileSize(file.size)} > ${formatFileSize(maxSize)}`);
                        fileInput.value = '';
                        selectedFileInfo.style.display = 'none';
                        return;
                    }

                    showAlert('success', `文件选择成功: ${file.name}`);
                } else {
                    selectedFileInfo.style.display = 'none';
                }
            }
        }

        // 启动定时刷新
        function startPeriodicRefresh() {
            // 清除现有的定时器
            if (refreshInterval) {
                clearInterval(refreshInterval);
            }

            // 每30秒刷新一次任务列表
            refreshInterval = setInterval(() => {
                const now = Date.now();
                // 避免频繁刷新，至少间隔10秒
                if (now - lastRefreshTime > 1000) {
                    console.log("🔄 定时刷新任务列表");
                    loadRecentTasks();
                }
            }, 10000);
        }

        // 停止定时刷新
        function stopPeriodicRefresh() {
            if (refreshInterval) {
                clearInterval(refreshInterval);
                refreshInterval = null;
            }
        }

        // 智能刷新（避免重复刷新）
        function smartRefresh() {
            const now = Date.now();
            if (now - lastRefreshTime > 2000) { // 至少间隔2秒
                loadRecentTasks();
            }
        }

        // 页面可见性变化处理
        document.addEventListener('visibilitychange', function() {
            if (document.hidden) {
                // 页面隐藏时停止定时刷新
                stopPeriodicRefresh();
            } else {
                // 页面显示时恢复定时刷新并立即刷新一次
                smartRefresh();
                startPeriodicRefresh();
            }
        });

        // 页面加载时初始化
        document.addEventListener('DOMContentLoaded', function() {
            loadRecentTasks();
            initializeFileDragDrop();
            startPeriodicRefresh();
            loadGpuInfo(); // 加载GPU信息

            // 延迟初始化智能GPU预设选择，等待GPU检测完成
            setTimeout(() => {
                initializeSmartPresetSelection();
            }, 2000);
        });

        // 页面卸载时清理
        window.addEventListener('beforeunload', function() {
            stopPeriodicRefresh();
        });

        // 加载GPU硬件加速信息
        async function loadGpuInfo() {
            try {
                const response = await fetch('/api/gpu/capabilities');
                const result = await response.json();

                if (result.success) {
                    displayGpuInfo(result.data);
                } else {
                    displayGpuError('获取GPU信息失败');
                }
            } catch (error) {
                console.error('加载GPU信息失败:', error);
                displayGpuError('无法连接到GPU检测服务');
            }
        }

        // 显示GPU信息
        function displayGpuInfo(gpuData) {
            const gpuInfoContainer = document.getElementById('gpuInfo');

            if (!gpuData.hasAnyGpuSupport) {
                gpuInfoContainer.innerHTML = `
                    <div class="text-center text-muted">
                        <i class="fas fa-exclamation-triangle fa-2x mb-2 text-warning"></i>
                        <h6>未检测到GPU硬件加速支持</h6>
                        <p class="small mb-0">系统将使用CPU进行视频转码</p>
                    </div>
                `;
                return;
            }

            let html = `
                <div class="row">
                    <div class="col-12 mb-3">
                        <div class="alert alert-success d-flex align-items-center" role="alert">
                            <i class="fas fa-check-circle me-2"></i>
                            <div>
                                <strong>GPU加速可用!</strong><br>
                                <small>支持: ${gpuData.supportedTypes}</small>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
            `;

            // NVIDIA NVENC
            if (gpuData.nvidia.supported) {
                html += `
                    <div class="col-md-6 mb-3">
                        <div class="card border-success">
                            <div class="card-body p-2">
                                <h6 class="card-title text-success mb-1">
                                    <i class="fab fa-nvidia"></i> NVIDIA NVENC
                                </h6>
                                <small class="text-muted">编码器: ${gpuData.nvidia.encoders.join(', ')}</small>
                            </div>
                        </div>
                    </div>
                `;
            }

            // Intel QSV
            if (gpuData.intel.supported) {
                html += `
                    <div class="col-md-6 mb-3">
                        <div class="card border-primary">
                            <div class="card-body p-2">
                                <h6 class="card-title text-primary mb-1">
                                    <i class="fab fa-intel"></i> Intel QSV
                                </h6>
                                <small class="text-muted">编码器: ${gpuData.intel.encoders.join(', ')}</small>
                            </div>
                        </div>
                    </div>
                `;
            }

            // AMD VCE/AMF
            if (gpuData.amd.supported) {
                html += `
                    <div class="col-md-6 mb-3">
                        <div class="card border-danger">
                            <div class="card-body p-2">
                                <h6 class="card-title text-danger mb-1">
                                    <i class="fab fa-amd"></i> AMD VCE/AMF
                                </h6>
                                <small class="text-muted">编码器: ${gpuData.amd.encoders.join(', ')}</small>
                            </div>
                        </div>
                    </div>
                `;
            }

            html += '</div>';

            // GPU设备信息
            if (gpuData.gpuDevices && gpuData.gpuDevices.length > 0) {
                html += `
                    <div class="mt-2">
                        <h6 class="small text-muted mb-1">检测到的GPU设备:</h6>
                        <ul class="list-unstyled small">
                `;
                gpuData.gpuDevices.forEach(device => {
                    html += `<li><i class="fas fa-microchip text-muted me-1"></i>${device}</li>`;
                });
                html += '</ul></div>';
            }

            gpuInfoContainer.innerHTML = html;
        }

        // 显示GPU错误信息
        function displayGpuError(message) {
            const gpuInfoContainer = document.getElementById('gpuInfo');
            gpuInfoContainer.innerHTML = `
                <div class="text-center text-muted">
                    <i class="fas fa-exclamation-circle fa-2x mb-2 text-danger"></i>
                    <h6>GPU检测失败</h6>
                    <p class="small mb-0">${message}</p>
                </div>
            `;
        }

        // 刷新GPU信息
        document.getElementById('refreshGpuInfo').addEventListener('click', async function() {
            const button = this;
            const icon = button.querySelector('i');

            // 显示加载状态
            icon.className = 'fas fa-spinner fa-spin';
            button.disabled = true;

            try {
                // 调用刷新API
                await fetch('/api/gpu/refresh', { method: 'POST' });
                // 重新加载GPU信息
                await loadGpuInfo();
            } catch (error) {
                console.error('刷新GPU信息失败:', error);
                displayGpuError('刷新失败，请稍后重试');
            } finally {
                // 恢复按钮状态
                icon.className = 'fas fa-sync-alt';
                button.disabled = false;
            }
        });

        // 检查编码器是否为GPU加速
        function isGpuEncoder(codec) {
            if (!codec) return false;
            const gpuEncoders = ['nvenc', 'qsv', 'amf', 'vaapi'];
            return gpuEncoders.some(gpu => codec.toLowerCase().includes(gpu));
        }

        // 更新GPU加速标识
        function updateGpuAccelBadge(codec) {
            const badge = document.getElementById('gpuAccelBadge');
            if (isGpuEncoder(codec)) {
                badge.style.display = 'inline-block';
            } else {
                badge.style.display = 'none';
            }
        }

        }); // 结束 DOMContentLoaded 事件监听器
    </script>
}
*@