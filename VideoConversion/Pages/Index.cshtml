@page
@model IndexModel
@{
    ViewData["Title"] = "视频转换工具";
}

<style>
/* 基础样式 - 为后续任务做准备 */
.file-drop-zone {
    border: 2px dashed #dee2e6;
    border-radius: 0.375rem;
    transition: all 0.3s ease;
    cursor: pointer;
}

.file-drop-zone:hover {
    border-color: #0d6efd;
    background-color: #f8f9fa;
}

.file-drop-zone.dragover {
    border-color: #0d6efd;
    background-color: #e7f3ff;
    transform: scale(1.02);
}

.border-dashed {
    border-style: dashed !important;
}

/* 进度条动画 */
.progress-bar-animated {
    animation: progress-bar-stripes 1s linear infinite;
}

/* 连接状态指示器样式 */
#connectionStatus {
    font-size: 0.75rem;
    transition: all 0.3s ease;
}

/* 卡片悬停效果 */
.card {
    transition: box-shadow 0.3s ease;
}

.card:hover {
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
}

/* 响应式调整 */
@@media (max-width: 768px) {
    .container-fluid {
        padding-left: 1rem;
        padding-right: 1rem;
    }

    .position-fixed.top-0.end-0 {
        position: relative !important;
        top: auto !important;
        right: auto !important;
        margin-bottom: 1rem;
    }
}
</style>

<!-- 页面头部 -->
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">
                <i class="fas fa-video text-primary"></i>
                视频转换工具
            </h1>
        </div>
    </div>

    <!-- 主要内容区域 -->
    <div class="row">
        <!-- 左侧：文件上传和设置 -->
        <div class="col-lg-8">
            <div id="fileUploadSection">
                <!-- 文件上传区域 -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-upload text-primary"></i>
                            文件上传
                        </h5>
                    </div>
                    <div class="card-body">
                        <!-- 拖拽上传区域 -->
                        <div class="file-drop-zone border-dashed p-4 text-center" id="fileDropZone">
                            <i class="fas fa-cloud-upload-alt fa-3x text-muted mb-3"></i>
                            <p class="mb-2">拖拽视频文件到此处或点击选择文件</p>
                            <input type="file" class="form-control" id="videoFile" name="videoFile"
                                   accept=".mp4,.avi,.mov,.mkv,.wmv,.flv,.webm,.m4v" required>
                            <small class="text-muted">
                                支持格式: MP4, AVI, MOV, MKV, WMV, FLV, WebM, M4V (最大2GB)
                            </small>
                        </div>

                        <!-- 文件信息显示 -->
                        <div id="selectedFileInfo" style="display: none;" class="mt-3">
                            <div class="alert alert-info">
                                <h6><i class="fas fa-file-video"></i> 已选择文件</h6>
                                <div class="row">
                                    <div class="col-md-6">
                                        <strong>文件名:</strong> <span id="selectedFileName"></span>
                                    </div>
                                    <div class="col-md-6">
                                        <strong>大小:</strong> <span id="selectedFileSize"></span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- 上传进度显示 -->
                        <div id="uploadProgressContainer" style="display: none;" class="mt-3">
                            <div class="card border-primary">
                                <div class="card-header bg-light">
                                    <h6 class="mb-0">
                                        <i class="fas fa-upload text-primary"></i>
                                        文件上传进度
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <div class="progress mb-2" style="height: 20px;">
                                        <div id="uploadProgressBar" class="progress-bar progress-bar-striped progress-bar-animated bg-primary"
                                             role="progressbar" style="width: 0%"></div>
                                    </div>
                                    <div class="row text-muted small">
                                        <div class="col-4">
                                            <i class="fas fa-percentage"></i>
                                            <span id="uploadPercentage">0%</span>
                                        </div>
                                        <div class="col-4">
                                            <i class="fas fa-tachometer-alt"></i>
                                            <span id="uploadSpeed">0 MB/s</span>
                                        </div>
                                        <div class="col-4">
                                            <i class="fas fa-clock"></i>
                                            <span id="uploadTimeRemaining">计算中...</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                        <!-- 当前任务显示 - 移动到上传进度后 -->
                        <div id="currentTaskSection">
                            <div class="card mb-4" id="currentTaskCard" style="display: none;">
                                <div class="card-header bg-primary text-white">
                                    <h6 class="mb-0">
                                        <i class="fas fa-cog fa-spin"></i>
                                        当前转换任务
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <!-- 任务基本信息 -->
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <h6 class="mb-0">
                                            <span id="currentTaskName">任务名称</span>
                                        </h6>
                                        <small class="text-muted" id="taskId">任务ID</small>
                                    </div>

                                    <!-- 文件信息 -->
                                    <div class="row mb-3" id="fileInfo" style="display: none;">
                                        <div class="col-6">
                                            <small class="text-muted">原始文件</small><br>
                                            <span id="originalFileName" class="fw-bold"></span>
                                        </div>
                                        <div class="col-6">
                                            <small class="text-muted">输出格式</small><br>
                                            <span id="outputFormat" class="fw-bold"></span>
                                        </div>
                                    </div>

                                    <!-- 进度条 -->
                                    <div class="progress mb-3" style="height: 25px;">
                                        <div id="progressBar" class="progress-bar progress-bar-striped progress-bar-animated"
                                             role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                                            <span class="fw-bold">0%</span>
                                        </div>
                                    </div>

                                    <!-- 详细状态信息 -->
                                    <div class="row text-center mb-3">
                                        <div class="col-3">
                                            <small class="text-muted">转换速度</small><br>
                                            <span id="conversionSpeed" class="fw-bold">-</span>
                                        </div>
                                        <div class="col-3">
                                            <small class="text-muted">剩余时间</small><br>
                                            <span id="remainingTime" class="fw-bold">-</span>
                                        </div>
                                        <div class="col-3">
                                            <small class="text-muted">已用时间</small><br>
                                            <span id="elapsedTime" class="fw-bold">-</span>
                                        </div>
                                        <div class="col-3">
                                            <small class="text-muted">文件大小</small><br>
                                            <span id="fileSize" class="fw-bold">-</span>
                                        </div>
                                    </div>

                                    <!-- 当前状态 -->
                                    <div class="alert alert-info mb-3" role="alert" id="taskStatusAlert">
                                        <i class="fas fa-info-circle"></i>
                                        <span id="taskStatus">等待中...</span>
                                    </div>

                                    <!-- 操作按钮 -->
                                    <div class="d-flex gap-2" id="taskActionButtons">
                                        <button type="button" class="btn btn-outline-danger btn-sm" id="cancelTask">
                                            <i class="fas fa-stop"></i> 取消转换
                                        </button>
                                        <button type="button" class="btn btn-outline-info btn-sm" id="refreshTask" style="display: none;">
                                            <i class="fas fa-sync"></i> 刷新状态
                                        </button>
                                        <a class="btn btn-outline-success btn-sm" id="downloadTask" style="display: none;">
                                            <i class="fas fa-download"></i> 下载文件
                                        </a>
                                        <button type="button" class="btn btn-outline-primary btn-sm" id="restartTask" style="display: none;">
                                            <i class="fas fa-redo"></i> 重新开始
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
            </div>
            <div id="conversionSettings">
                <!-- 转换设置区域 -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-cogs text-primary"></i>
                            转换设置
                        </h5>
                    </div>
                    <div class="card-body">
                        <form id="conversionForm">
                            <!-- 预设选择 -->
                            <div class="mb-3">
                                <label for="preset" class="form-label">转换预设</label>
                                <select class="form-select" id="preset" name="preset" required>
                                    <option value="">请选择预设...</option>
                                    <option value="gpu_fast_1080p_nvenc">GPU Fast 1080p (NVENC)</option>
                                    <option value="gpu_hq_1080p_nvenc">GPU High Quality 1080p (NVENC)</option>
                                    <option value="gpu_4k_ultra_nvenc">GPU 4K Ultra (NVENC)</option>
                                    <option value="gpu_fast_1080p_qsv">GPU Fast 1080p (QSV)</option>
                                    <option value="gpu_hq_1080p_qsv">GPU High Quality 1080p (QSV)</option>
                                    <option value="gpu_fast_1080p_amf">GPU Fast 1080p (AMF)</option>
                                    <option value="gpu_hq_1080p_amf">GPU High Quality 1080p (AMF)</option>
                                    <option value="cpu_standard_1080p">CPU Standard 1080p</option>
                                    <option value="cpu_hq_1080p">CPU High Quality 1080p</option>
                                </select>
                                <div class="form-text">
                                    <i class="fas fa-lightbulb text-warning"></i>
                                    系统将根据您的GPU硬件自动推荐最佳预设
                                </div>
                            </div>

                            <!-- 高级设置手风琴 -->
                            <div class="accordion" id="advancedSettings">
                                <!-- 基本设置 -->
                                <div class="accordion-item">
                                    <h2 class="accordion-header">
                                        <button class="accordion-button collapsed" type="button"
                                                data-bs-toggle="collapse" data-bs-target="#basicPanel">
                                            <i class="fas fa-cogs"></i>&nbsp;基本设置
                                        </button>
                                    </h2>
                                    <div id="basicPanel" class="accordion-collapse collapse">
                                        <div class="accordion-body">
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <label for="outputFormat" class="form-label">输出格式</label>
                                                    <select class="form-select" id="outputFormat" name="outputFormat">
                                                        <option value="mp4">MP4 (H.264)</option>
                                                        <option value="mp4_h265">MP4 (H.265/HEVC)</option>
                                                        <option value="webm">WebM (VP9)</option>
                                                        <option value="avi">AVI</option>
                                                    </select>
                                                </div>
                                                <div class="col-md-6">
                                                    <label for="resolution" class="form-label">分辨率</label>
                                                    <select class="form-select" id="resolution" name="resolution">
                                                        <option value="">保持原始</option>
                                                        <option value="3840x2160">4K (3840x2160)</option>
                                                        <option value="1920x1080">1080p (1920x1080)</option>
                                                        <option value="1280x720">720p (1280x720)</option>
                                                        <option value="854x480">480p (854x480)</option>
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- 视频设置 -->
                                <div class="accordion-item">
                                    <h2 class="accordion-header">
                                        <button class="accordion-button collapsed" type="button"
                                                data-bs-toggle="collapse" data-bs-target="#videoPanel">
                                            <i class="fas fa-video"></i>&nbsp;视频设置
                                        </button>
                                    </h2>
                                    <div id="videoPanel" class="accordion-collapse collapse">
                                        <div class="accordion-body">
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <label for="videoCodec" class="form-label">视频编解码器</label>
                                                    <select class="form-select" id="videoCodec" name="videoCodec">
                                                        <option value="libx264">H.264 (CPU)</option>
                                                        <option value="h264_nvenc">H.264 (NVIDIA)</option>
                                                        <option value="h264_qsv">H.264 (Intel QSV)</option>
                                                        <option value="h264_amf">H.264 (AMD AMF)</option>
                                                        <option value="libx265">H.265/HEVC (CPU)</option>
                                                        <option value="hevc_nvenc">H.265/HEVC (NVIDIA)</option>
                                                        <option value="hevc_qsv">H.265/HEVC (Intel QSV)</option>
                                                        <option value="hevc_amf">H.265/HEVC (AMD AMF)</option>
                                                        <option value="libvpx-vp9">VP9 (CPU)</option>
                                                        <option value="av1_nvenc">AV1 (NVIDIA)</option>
                                                    </select>
                                                </div>
                                                <div class="col-md-6">
                                                    <label for="encodingPreset" class="form-label">编码预设</label>
                                                    <select class="form-select" id="encodingPreset" name="encodingPreset">
                                                        <option value="ultrafast">极快 (最低质量)</option>
                                                        <option value="superfast">超快</option>
                                                        <option value="veryfast">很快</option>
                                                        <option value="faster">较快</option>
                                                        <option value="fast">快</option>
                                                        <option value="medium" selected>中等 (推荐)</option>
                                                        <option value="slow">慢</option>
                                                        <option value="slower">较慢</option>
                                                        <option value="veryslow">很慢 (最高质量)</option>
                                                    </select>
                                                </div>
                                            </div>

                                            <div class="row mt-3">
                                                <div class="col-md-6">
                                                    <label for="qualityMode" class="form-label">质量模式</label>
                                                    <select class="form-select" id="qualityMode" name="qualityMode">
                                                        <option value="crf" selected>恒定质量 (CRF)</option>
                                                        <option value="bitrate">恒定比特率 (CBR)</option>
                                                        <option value="vbr">可变比特率 (VBR)</option>
                                                        <option value="2pass">两遍编码</option>
                                                    </select>
                                                </div>
                                                <div class="col-md-6" id="crfQualityContainer">
                                                    <label for="videoQuality" class="form-label">
                                                        CRF质量值 <span id="qualityValue">23</span>
                                                    </label>
                                                    <input type="range" class="form-range" id="videoQuality"
                                                           name="videoQuality" min="0" max="51" value="23">
                                                    <div class="form-text">0=无损, 18=视觉无损, 23=高质量, 28=中等质量</div>
                                                </div>
                                                <div class="col-md-6" id="bitrateContainer" style="display: none;">
                                                    <label for="videoBitrate" class="form-label">视频比特率</label>
                                                    <div class="input-group">
                                                        <input type="number" class="form-control" id="videoBitrate"
                                                               name="videoBitrate" min="100" max="50000" value="5000">
                                                        <span class="input-group-text">kbps</span>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="row mt-3">
                                                <div class="col-md-6">
                                                    <label for="frameRate" class="form-label">帧率</label>
                                                    <select class="form-select" id="frameRate" name="frameRate">
                                                        <option value="">保持原始</option>
                                                        <option value="24">24 fps (电影)</option>
                                                        <option value="25">25 fps (PAL)</option>
                                                        <option value="30">30 fps (NTSC)</option>
                                                        <option value="50">50 fps</option>
                                                        <option value="60">60 fps</option>
                                                        <option value="120">120 fps</option>
                                                    </select>
                                                </div>
                                                <div class="col-md-6">
                                                    <label for="profile" class="form-label">编码配置</label>
                                                    <select class="form-select" id="profile" name="profile">
                                                        <option value="">自动</option>
                                                        <option value="baseline">Baseline</option>
                                                        <option value="main">Main</option>
                                                        <option value="high">High</option>
                                                        <option value="high10">High 10</option>
                                                        <option value="high422">High 4:2:2</option>
                                                        <option value="high444">High 4:4:4</option>
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- 音频设置 -->
                                <div class="accordion-item">
                                    <h2 class="accordion-header">
                                        <button class="accordion-button collapsed" type="button"
                                                data-bs-toggle="collapse" data-bs-target="#audioPanel">
                                            <i class="fas fa-volume-up"></i>&nbsp;音频设置
                                        </button>
                                    </h2>
                                    <div id="audioPanel" class="accordion-collapse collapse">
                                        <div class="accordion-body">
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <label for="audioCodec" class="form-label">音频编解码器</label>
                                                    <select class="form-select" id="audioCodec" name="audioCodec">
                                                        <option value="aac">AAC (推荐)</option>
                                                        <option value="mp3">MP3</option>
                                                        <option value="opus">Opus (高效)</option>
                                                        <option value="flac">FLAC (无损)</option>
                                                        <option value="ac3">AC3 (杜比)</option>
                                                        <option value="eac3">E-AC3 (杜比增强)</option>
                                                        <option value="copy">复制原始</option>
                                                        <option value="none">移除音频</option>
                                                    </select>
                                                </div>
                                                <div class="col-md-6">
                                                    <label for="audioQualityMode" class="form-label">音频质量模式</label>
                                                    <select class="form-select" id="audioQualityMode" name="audioQualityMode">
                                                        <option value="bitrate" selected>比特率</option>
                                                        <option value="quality">质量等级</option>
                                                        <option value="vbr">可变比特率</option>
                                                    </select>
                                                </div>
                                            </div>

                                            <div class="row mt-3">
                                                <div class="col-md-6" id="audioBitrateContainer">
                                                    <label for="audioQuality" class="form-label">音频比特率</label>
                                                    <select class="form-select" id="audioQuality" name="audioQuality">
                                                        <option value="96k">96 kbps (低质量)</option>
                                                        <option value="128k">128 kbps (标准)</option>
                                                        <option value="192k" selected>192 kbps (高质量)</option>
                                                        <option value="256k">256 kbps (很高质量)</option>
                                                        <option value="320k">320 kbps (最高质量)</option>
                                                        <option value="512k">512 kbps (专业)</option>
                                                    </select>
                                                </div>
                                                <div class="col-md-6">
                                                    <label for="audioChannels" class="form-label">声道配置</label>
                                                    <select class="form-select" id="audioChannels" name="audioChannels">
                                                        <option value="">保持原始</option>
                                                        <option value="1">单声道</option>
                                                        <option value="2">立体声</option>
                                                        <option value="6">5.1环绕声</option>
                                                        <option value="8">7.1环绕声</option>
                                                    </select>
                                                </div>
                                            </div>

                                            <div class="row mt-3">
                                                <div class="col-md-6">
                                                    <label for="sampleRate" class="form-label">采样率</label>
                                                    <select class="form-select" id="sampleRate" name="sampleRate">
                                                        <option value="">保持原始</option>
                                                        <option value="22050">22.05 kHz</option>
                                                        <option value="44100">44.1 kHz (CD质量)</option>
                                                        <option value="48000">48 kHz (DVD质量)</option>
                                                        <option value="96000">96 kHz (高保真)</option>
                                                        <option value="192000">192 kHz (专业)</option>
                                                    </select>
                                                </div>
                                                <div class="col-md-6">
                                                    <label for="audioVolume" class="form-label">
                                                        音量调整 <span id="volumeValue">0</span> dB
                                                    </label>
                                                    <input type="range" class="form-range" id="audioVolume"
                                                           name="audioVolume" min="-20" max="20" value="0" step="0.5">
                                                    <div class="form-text">-20dB (很小) 到 +20dB (很大)</div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- 高级设置 -->
                                <div class="accordion-item">
                                    <h2 class="accordion-header">
                                        <button class="accordion-button collapsed" type="button"
                                                data-bs-toggle="collapse" data-bs-target="#advancedPanel">
                                            <i class="fas fa-cog"></i>&nbsp;高级设置
                                        </button>
                                    </h2>
                                    <div id="advancedPanel" class="accordion-collapse collapse">
                                        <div class="accordion-body">
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <label for="hardwareAcceleration" class="form-label">硬件加速</label>
                                                    <select class="form-select" id="hardwareAcceleration" name="hardwareAcceleration">
                                                        <option value="auto" selected>自动检测</option>
                                                        <option value="none">禁用</option>
                                                        <option value="nvenc">NVIDIA NVENC</option>
                                                        <option value="qsv">Intel Quick Sync</option>
                                                        <option value="amf">AMD AMF</option>
                                                        <option value="videotoolbox">Apple VideoToolbox</option>
                                                    </select>
                                                </div>
                                                <div class="col-md-6">
                                                    <label for="twoPass" class="form-label">编码模式</label>
                                                    <select class="form-select" id="twoPass" name="twoPass">
                                                        <option value="false" selected>单遍编码 (快速)</option>
                                                        <option value="true">两遍编码 (高质量)</option>
                                                    </select>
                                                </div>
                                            </div>

                                            <div class="row mt-3">
                                                <div class="col-md-6">
                                                    <label for="pixelFormat" class="form-label">像素格式</label>
                                                    <select class="form-select" id="pixelFormat" name="pixelFormat">
                                                        <option value="">自动</option>
                                                        <option value="yuv420p">YUV420P (标准)</option>
                                                        <option value="yuv422p">YUV422P (专业)</option>
                                                        <option value="yuv444p">YUV444P (无损)</option>
                                                        <option value="yuv420p10le">YUV420P 10-bit</option>
                                                        <option value="yuv422p10le">YUV422P 10-bit</option>
                                                    </select>
                                                </div>
                                                <div class="col-md-6">
                                                    <label for="colorSpace" class="form-label">色彩空间</label>
                                                    <select class="form-select" id="colorSpace" name="colorSpace">
                                                        <option value="">保持原始</option>
                                                        <option value="bt709">BT.709 (HD)</option>
                                                        <option value="bt2020">BT.2020 (4K HDR)</option>
                                                        <option value="smpte170m">SMPTE-170M (NTSC)</option>
                                                        <option value="bt470bg">BT.470BG (PAL)</option>
                                                    </select>
                                                </div>
                                            </div>

                                            <div class="row mt-3">
                                                <div class="col-md-12">
                                                    <div class="form-check form-switch">
                                                        <input class="form-check-input" type="checkbox" id="fastStart" name="fastStart" checked>
                                                        <label class="form-check-label" for="fastStart">
                                                            快速启动 (Web优化)
                                                        </label>
                                                        <div class="form-text">将元数据移到文件开头，便于网络播放</div>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="row mt-3">
                                                <div class="col-md-12">
                                                    <div class="form-check form-switch">
                                                        <input class="form-check-input" type="checkbox" id="deinterlace" name="deinterlace">
                                                        <label class="form-check-label" for="deinterlace">
                                                            去隔行扫描
                                                        </label>
                                                        <div class="form-text">移除隔行扫描视频的锯齿效果</div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- 滤镜设置 -->
                                <div class="accordion-item">
                                    <h2 class="accordion-header">
                                        <button class="accordion-button collapsed" type="button"
                                                data-bs-toggle="collapse" data-bs-target="#filtersPanel">
                                            <i class="fas fa-magic"></i>&nbsp;滤镜设置
                                        </button>
                                    </h2>
                                    <div id="filtersPanel" class="accordion-collapse collapse">
                                        <div class="accordion-body">
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <label for="denoise" class="form-label">降噪滤镜</label>
                                                    <select class="form-select" id="denoise" name="denoise">
                                                        <option value="">无</option>
                                                        <option value="hqdn3d">高质量降噪</option>
                                                        <option value="nlmeans">非局部均值降噪</option>
                                                        <option value="bm3d">BM3D降噪 (最佳)</option>
                                                    </select>
                                                </div>
                                                <div class="col-md-6">
                                                    <label for="videoFilters" class="form-label">自定义视频滤镜</label>
                                                    <input type="text" class="form-control" id="videoFilters" name="videoFilters"
                                                           placeholder="例如: scale=1920:1080,unsharp=5:5:1.0">
                                                    <div class="form-text">FFmpeg滤镜语法</div>
                                                </div>
                                            </div>

                                            <div class="row mt-3">
                                                <div class="col-md-12">
                                                    <label for="audioFilters" class="form-label">自定义音频滤镜</label>
                                                    <input type="text" class="form-control" id="audioFilters" name="audioFilters"
                                                           placeholder="例如: highpass=f=200,lowpass=f=3000">
                                                    <div class="form-text">FFmpeg音频滤镜语法</div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- 时间裁剪 -->
                                <div class="accordion-item">
                                    <h2 class="accordion-header">
                                        <button class="accordion-button collapsed" type="button"
                                                data-bs-toggle="collapse" data-bs-target="#trimPanel">
                                            <i class="fas fa-cut"></i>&nbsp;时间裁剪
                                        </button>
                                    </h2>
                                    <div id="trimPanel" class="accordion-collapse collapse">
                                        <div class="accordion-body">
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <label for="startTime" class="form-label">开始时间</label>
                                                    <input type="text" class="form-control" id="startTime" name="startTime"
                                                           placeholder="00:00:00 或 秒数">
                                                    <div class="form-text">格式: HH:MM:SS 或秒数</div>
                                                </div>
                                                <div class="col-md-6">
                                                    <label for="endTime" class="form-label">结束时间</label>
                                                    <input type="text" class="form-control" id="endTime" name="endTime"
                                                           placeholder="00:10:00 或 秒数">
                                                    <div class="form-text">格式: HH:MM:SS 或秒数</div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- 任务设置 -->
                                <div class="accordion-item">
                                    <h2 class="accordion-header">
                                        <button class="accordion-button collapsed" type="button"
                                                data-bs-toggle="collapse" data-bs-target="#taskPanel">
                                            <i class="fas fa-tasks"></i>&nbsp;任务设置
                                        </button>
                                    </h2>
                                    <div id="taskPanel" class="accordion-collapse collapse">
                                        <div class="accordion-body">
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <label for="priority" class="form-label">任务优先级</label>
                                                    <select class="form-select" id="priority" name="priority">
                                                        <option value="-2">很低</option>
                                                        <option value="-1">低</option>
                                                        <option value="0" selected>正常</option>
                                                        <option value="1">高</option>
                                                        <option value="2">很高</option>
                                                    </select>
                                                </div>
                                                <div class="col-md-6">
                                                    <label for="tags" class="form-label">标签</label>
                                                    <input type="text" class="form-control" id="tags" name="tags"
                                                           placeholder="用逗号分隔多个标签">
                                                    <div class="form-text">便于任务分类和搜索</div>
                                                </div>
                                            </div>

                                            <div class="row mt-3">
                                                <div class="col-md-12">
                                                    <label for="notes" class="form-label">备注</label>
                                                    <textarea class="form-control" id="notes" name="notes" rows="2"
                                                              placeholder="任务备注信息"></textarea>
                                                </div>
                                            </div>

                                            <div class="row mt-3">
                                                <div class="col-md-12">
                                                    <label for="customParams" class="form-label">自定义FFmpeg参数</label>
                                                    <textarea class="form-control" id="customParams" name="customParams" rows="2"
                                                              placeholder="高级用户可添加自定义FFmpeg参数"></textarea>
                                                    <div class="form-text">
                                                        <i class="fas fa-exclamation-triangle text-warning"></i>
                                                        警告: 不正确的参数可能导致转换失败
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- 隐藏字段 - 为未显示的参数提供默认值 -->
                            <input type="hidden" name="copyTimestamps" value="true">
                            <input type="hidden" name="videoBitrate" value="5000">

                            <!-- 提交按钮 -->
                            <div class="mt-4">
                                <button type="submit" class="btn btn-primary btn-lg" id="startConversion">
                                    <i class="fas fa-play"></i> 开始转换
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- 右侧：状态和信息 -->
        <div class="col-lg-4">

            <div id="gpuInfoSection">
                <!-- GPU信息显示 - 待实现 -->
                <div class="card mb-4">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">
                                <i class="fas fa-microchip text-primary"></i>
                                GPU硬件加速
                            </h6>
                            <button class="btn btn-outline-primary btn-sm" onclick="loadGpuInfo()">
                                <i class="fas fa-redo"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div id="gpuInfo">
                            <div class="text-center" id="gpuLoading">
                                <div class="spinner-border spinner-border-sm text-primary" role="status">
                                    <span class="visually-hidden">检测中...</span>
                                </div>
                                <p class="text-muted mt-2">正在检测GPU信息...</p>
                            </div>

                            <!-- GPU检测结果 -->
                            <div id="gpuResults" style="display: none;">
                                <!-- GPU卡片列表 -->
                                <div id="gpuCards"></div>




                            </div>

                            <!-- GPU检测失败或无支持 -->
                            <div id="gpuError" style="display: none;">
                                <div class="alert alert-warning" role="alert">
                                    <i class="fas fa-exclamation-triangle"></i>
                                    <strong>未检测到GPU硬件加速支持</strong>
                                    <p class="mb-0 mt-2">系统将使用CPU进行视频转码，可能的原因：</p>
                                    <ul class="mb-0 mt-2">
                                        <li>没有安装GPU驱动程序</li>
                                        <li>GPU不支持硬件加速</li>
                                        <li>系统权限不足</li>
                                    </ul>
                                    <button class="btn btn-outline-warning btn-sm mt-2" onclick="loadGpuInfo()">
                                        <i class="fas fa-redo"></i> 重新检测
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="recentTasksSection">
                <!-- 最近任务列表 -->
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">
                                <i class="fas fa-history text-secondary"></i>
                                最近任务
                            </h6>
                            <button class="btn btn-outline-secondary btn-sm" onclick="loadRecentTasks()">
                                <i class="fas fa-refresh"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div id="recentTasks">
                            <p class="text-muted text-center">暂无最近任务</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 连接状态指示器 -->
<div class="position-fixed top-0 end-0 p-3" style="z-index: 1050;">
    <div class="d-flex align-items-center">
        <small class="text-muted me-2">连接状态:</small>
        <span id="connectionStatus" class="badge bg-secondary">未连接</span>
    </div>
</div>

@section Scripts {
<script>
// 检查jQuery是否已加载
if (typeof jQuery === 'undefined') {
    console.error('jQuery未加载！请确保jQuery库已正确引用。');
    // 尝试从CDN加载jQuery作为备用
    const script = document.createElement('script');
    script.src = 'https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js';
    script.onload = function() {
        console.log('jQuery已从CDN加载');
        initializeVideoConversionApp();
    };
    document.head.appendChild(script);
} else {
    console.log('jQuery已加载，版本:', jQuery.fn.jquery);
    initializeVideoConversionApp();
}

function initializeVideoConversionApp() {
// 视频转换应用主模块 - 定义为全局变量
window.VideoConversionApp = (function($) {
    'use strict';

    // 私有变量
    let currentTaskId = null;
    let connectionState = 'Disconnected';
    let currentTaskStartTime = null;
    let lastProgressUpdate = null;
    let connection = null;

    // 工具函数模块
    const Utils = {
        // 消息提示函数
        showAlert: function(type, message) {
            // 创建提示元素
            const alertDiv = $(`
                <div class="alert alert-${type} alert-dismissible fade show position-fixed"
                     style="top: 20px; right: 20px; z-index: 9999; max-width: 400px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);">
                    <i class="fas fa-${type === 'success' ? 'check-circle' :
                                        type === 'danger' ? 'exclamation-triangle' :
                                        type === 'warning' ? 'exclamation-triangle' :
                                        'info-circle'}"></i>
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `);

            // 添加到body而不是container-fluid，避免挤压页面布局
            $('body').append(alertDiv);

            // 5秒后自动消失
            setTimeout(() => {
                if (alertDiv.length && alertDiv.parent().length) {
                    alertDiv.alert('close');
                }
            }, 5000);
        },

        // 文件大小格式化
        formatFileSize: function(bytes) {
            if (!bytes || bytes === 0) return '0 B';
            const k = 1024;
            const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return `${(bytes / Math.pow(k, i)).toFixed(i === 0 ? 0 : 1)} ${sizes[i]}`;
        },

        // 时间格式化
        formatTime: function(seconds) {
            if (!seconds || seconds <= 0) return '-';

            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const secs = Math.floor(seconds % 60);

            if (hours > 0) {
                return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
            } else {
                return `${minutes}:${secs.toString().padStart(2, '0')}`;
            }
        },

        // 转换速度格式化
        formatSpeed: function(speed) {
            if (!speed || speed <= 0) return '-';

            // 如果是字符串且已经包含单位，直接返回
            if (typeof speed === 'string' && (speed.includes('x') || speed.includes('fps'))) {
                return speed;
            }

            // 如果是数字，格式化为倍速
            if (typeof speed === 'number') {
                if (speed >= 1000) {
                    return `${(speed / 1000).toFixed(1)}k倍速`;
                } else if (speed >= 100) {
                    return `${speed.toFixed(0)}倍速`;
                } else if (speed >= 10) {
                    return `${speed.toFixed(1)}倍速`;
                } else {
                    return `${speed.toFixed(2)}倍速`;
                }
            }

            return speed.toString();
        },

        // 统一的API调用方法
        apiCall: async function(url, options = {}) {
            try {
                const response = await fetch(url, {
                    headers: {
                        'Content-Type': 'application/json',
                        ...options.headers
                    },
                    ...options
                });

                const data = await response.json();

                if (!response.ok) {
                    throw new Error(data.message || `HTTP ${response.status}: ${response.statusText}`);
                }

                console.log(`✅ API调用成功: ${url}`, data);
                return data;
            } catch (error) {
                console.error(`❌ API调用失败: ${url}`, error);

                // 自动错误报告
                if (typeof ErrorHandler !== 'undefined') {
                    ErrorHandler.handleApplicationError(error, {
                        module: 'API',
                        action: url,
                        method: options.method || 'GET'
                    });
                }

                throw error;
            }
        },

        // 连接状态更新
        updateConnectionStatus: function(status) {
            connectionState = status;
            const $statusElement = $('#connectionStatus');
            if ($statusElement.length) {
                $statusElement.text(status)
                    .removeClass('bg-success bg-warning bg-danger')
                    .addClass(status === 'Connected' ? 'bg-success' :
                             status === 'Reconnecting' ? 'bg-warning' : 'bg-danger');
            }
        }
    };

    // 文件上传模块
    const FileUpload = {
        // 初始化
        init: function() {
            console.log('📁 初始化文件上传模块...');

            this.bindEvents();
            this.initializeDragDrop();

            console.log('✅ 文件上传模块初始化完成');
        },

        // 绑定事件
        bindEvents: function() {
            const $fileInput = $('#videoFile');

            $fileInput.on('change', (e) => {
                const file = e.target.files[0];
                if (file) {
                    this.handleFileSelection(file);
                }
            });
        },

        // 文件选择处理
        handleFileSelection: function(file) {
            console.log('📄 处理文件选择:', file.name);

            // 文件验证
            if (!this.validateFile(file)) {
                return;
            }

            // 显示文件信息
            this.displayFileInfo(file);

            // 触发智能预设选择
            ConversionSettings.initializeSmartPresetSelection();

            Utils.showAlert('success', `文件选择成功: ${file.name}`);
        },

        // 文件验证
        validateFile: function(file) {
            console.log('🔍 验证文件:', file.name);

            // 检查文件类型
            const allowedExtensions = ['.mp4', '.avi', '.mov', '.mkv', '.wmv', '.flv', '.webm', '.m4v'];
            const fileName = file.name.toLowerCase();
            const isValidType = allowedExtensions.some(ext => fileName.endsWith(ext));

            if (!isValidType) {
                Utils.showAlert('danger', `不支持的文件格式。支持的格式: ${allowedExtensions.join(', ')}`);
                return false;
            }

            // 检查文件大小 (2GB限制)
            const maxSize = 2 * 1024 * 1024 * 1024; // 2GB
            if (file.size > maxSize) {
                Utils.showAlert('danger', `文件大小超过限制: ${Utils.formatFileSize(file.size)} > ${Utils.formatFileSize(maxSize)}`);
                return false;
            }

            // 检查最小文件大小
            if (file.size < 1024) {
                Utils.showAlert('danger', '文件太小，可能不是有效的视频文件');
                return false;
            }

            console.log('✅ 文件验证通过');
            return true;
        },

        // 显示文件信息
        displayFileInfo: function(file) {
            console.log('📋 显示文件信息');

            const $fileInfoDiv = $('#selectedFileInfo');
            const $fileName = $('#selectedFileName');
            const $fileSize = $('#selectedFileSize');

            $fileName.text(file.name);
            $fileSize.text(Utils.formatFileSize(file.size));
            $fileInfoDiv.show();
        },

        // 初始化拖拽功能
        initializeDragDrop: function() {
            console.log('🎯 初始化拖拽上传功能...');

            const $dropZone = $('#fileDropZone');

            // 防止默认拖拽行为
            $dropZone.on('dragenter dragover dragleave drop', (e) => {
                e.preventDefault();
                e.stopPropagation();
            });

            $(document).on('dragenter dragover dragleave drop', (e) => {
                e.preventDefault();
                e.stopPropagation();
            });

            // 拖拽进入/离开视觉反馈
            $dropZone.on('dragenter dragover', (e) => {
                $dropZone.addClass('dragover');
            });

            $dropZone.on('dragleave drop', (e) => {
                $dropZone.removeClass('dragover');
            });

            // 文件拖拽处理
            $dropZone.on('drop', (e) => {
                const files = e.originalEvent.dataTransfer.files;

                if (files.length > 0) {
                    const $fileInput = $('#videoFile');
                    $fileInput[0].files = files;
                    this.handleFileSelection(files[0]);
                }
            });

            console.log('✅ 拖拽上传功能初始化完成');
        },

        // 显示上传进度
        showProgress: function() {
            $('#uploadProgressContainer').show();
        },

        // 隐藏上传进度
        hideProgress: function() {
            $('#uploadProgressContainer').hide();
        },

        // 更新上传进度
        updateProgress: function(data) {
            const $progressBar = $('#uploadProgressBar');
            const $percentage = $('#uploadPercentage');
            const $speed = $('#uploadSpeed');
            const $timeRemaining = $('#uploadTimeRemaining');

            if (data.Progress) {
                $progressBar.css('width', `${data.Progress}%`)
                    .attr('aria-valuenow', data.Progress);
                $percentage.text(`${data.Progress}%`);
            }

            if (data.Speed) {
                $speed.text(Utils.formatFileSize(data.Speed) + '/s');
            }

            if (data.EstimatedTimeRemaining) {
                $timeRemaining.text(Utils.formatTime(data.EstimatedTimeRemaining));
            }
        },





        // 普通文件上传处理（占位符）
        handleNormalUpload: async function(formData) {
            try {
                console.log('📤 处理普通文件上传...');
                // 这里将在任务4中实现实际的表单提交
                return { success: true };
            } catch (error) {
                ErrorHandler.handleApplicationError(error, { module: 'FileUpload', action: 'upload' });
                throw error;
            }
        },

        // 上传进度更新防抖控制
        uploadProgressUpdateTimeout: null,
        lastUploadProgressData: null,

        // 优化的上传进度更新方法
        updateUploadProgress: function(data) {
            console.log("📤 收到上传进度更新:", data);

            // 保存最新数据
            this.lastUploadProgressData = data;

            // 清除之前的更新计时器
            if (this.uploadProgressUpdateTimeout) {
                clearTimeout(this.uploadProgressUpdateTimeout);
            }

            // 立即更新关键信息（进度百分比）
            this.updateProgressBarImmediate(data);

            // 延迟更新其他信息（防抖）
            this.uploadProgressUpdateTimeout = setTimeout(() => {
                this.updateProgressDetails(this.lastUploadProgressData);
            }, 50); // 50ms防抖
        },

        // 立即更新进度条
        updateProgressBarImmediate: function(data) {
            const uploadContainer = document.getElementById('uploadProgressContainer');
            if (uploadContainer && uploadContainer.style.display === 'none') {
                uploadContainer.style.display = 'block';
            }

            const progressBar = document.getElementById('uploadProgressBar');
            const percentage = document.getElementById('uploadPercentage');

            if (progressBar) {
                // 使用CSS过渡实现平滑动画
                progressBar.style.transition = 'width 0.3s ease-out';
                progressBar.style.width = data.ProgressPercent + '%';
                progressBar.setAttribute('aria-valuenow', data.ProgressPercent);

                // 根据进度调整颜色
                if (data.ProgressPercent >= 100) {
                    progressBar.className = 'progress-bar bg-success';
                } else if (data.ProgressPercent >= 80) {
                    progressBar.className = 'progress-bar progress-bar-striped progress-bar-animated bg-info';
                } else {
                    progressBar.className = 'progress-bar progress-bar-striped progress-bar-animated bg-primary';
                }
            }

            if (percentage) {
                percentage.textContent = data.ProgressPercent + '%';
            }
        },

        // 更新详细信息
        updateProgressDetails: function(data) {
            if (!data) return;

            const speed = document.getElementById('uploadSpeed');
            const timeRemaining = document.getElementById('uploadTimeRemaining');
            const uploadedSize = document.getElementById('uploadedSize');
            const fileName = document.getElementById('uploadFileName');
            const uploadContainer = document.getElementById('uploadProgressContainer');

            // 检测高速上传（超过100MB/s）
            const isHighSpeed = data.Speed && data.Speed > 100 * 1024 * 1024;
            if (uploadContainer) {
                if (isHighSpeed) {
                    uploadContainer.classList.add('high-speed-upload');
                } else {
                    uploadContainer.classList.remove('high-speed-upload');
                }
            }

            // 使用后端格式化的数据（如果可用）
            if (speed) {
                if (data.SpeedFormatted) {
                    speed.textContent = data.SpeedFormatted;
                    // 高速上传时添加特殊标识
                    if (isHighSpeed) {
                        speed.innerHTML = `🚀 ${data.SpeedFormatted}`;
                        speed.className = 'text-success fw-bold';
                    } else {
                        speed.className = '';
                    }
                } else if (data.Speed) {
                    const speedText = Utils.formatFileSize(data.Speed) + '/s';
                    speed.textContent = speedText;
                    if (isHighSpeed) {
                        speed.innerHTML = `🚀 ${speedText}`;
                        speed.className = 'text-success fw-bold';
                    } else {
                        speed.className = '';
                    }
                } else {
                    speed.textContent = '计算中...';
                    speed.className = '';
                }
            }

            if (timeRemaining && data.EstimatedTimeRemaining !== undefined) {
                if (data.TimeRemainingFormatted) {
                    timeRemaining.textContent = data.TimeRemainingFormatted;
                } else {
                    timeRemaining.textContent = Utils.formatTime(data.EstimatedTimeRemaining);
                }
            }

            if (uploadedSize && data.UploadedSize !== undefined) {
                if (data.UploadedSizeFormatted) {
                    uploadedSize.textContent = data.UploadedSizeFormatted;
                } else {
                    uploadedSize.textContent = Utils.formatFileSize(data.UploadedSize);
                }
            }

            if (fileName && data.FileName) {
                fileName.textContent = data.FileName;
            }
        }
    };

    // SignalR通信模块
    const SignalRManager = {
        // 初始化SignalR
        init: function() {
            console.log('📡 初始化SignalR通信模块...');

            this.setupConnection();
            this.setupConnectionEvents();
            this.registerEventListeners();
            this.startConnection();

            console.log('✅ SignalR通信模块初始化完成');
        },

        // 设置连接
        setupConnection: function() {
            console.log('🔧 配置SignalR连接...');

            connection = new signalR.HubConnectionBuilder()
                .withUrl("/conversionHub")
                .withAutomaticReconnect([0, 2000, 10000, 30000])
                .configureLogging(signalR.LogLevel.Information)
                .build();

            Utils.updateConnectionStatus('Disconnected');
        },

        // 设置连接事件
        setupConnectionEvents: function() {
            console.log('🔗 设置连接状态事件...');

            // 重连中事件
            connection.onreconnecting((error) => {
                console.log("🔄 SignalR重连中...", error);
                Utils.updateConnectionStatus('Reconnecting');
                Utils.showAlert('warning', 'SignalR连接中断，正在重连...');
            });

            // 重连成功事件
            connection.onreconnected((connectionId) => {
                console.log("✅ SignalR重连成功:", connectionId);
                Utils.updateConnectionStatus('Connected');
                Utils.showAlert('success', 'SignalR连接已恢复');

                // 重连后重新加入任务组
                if (currentTaskId) {
                    this.joinTaskGroup(currentTaskId).catch(err => {
                        console.error("重新加入任务组失败:", err);
                    });
                }

                // 刷新任务状态
                this.requestTaskList();
            });

            // 连接关闭事件
            connection.onclose((error) => {
                console.warn("⚠️ SignalR连接已关闭:", error);
                Utils.updateConnectionStatus('Disconnected');
                Utils.showAlert('warning', 'SignalR连接已断开');
            });
        },

        // 启动连接
        startConnection: async function() {
            try {
                console.log('🔌 启动SignalR连接...');
                await connection.start();
                console.log("✅ SignalR连接成功");
                Utils.updateConnectionStatus('Connected');
                Utils.showAlert('success', 'SignalR连接已建立，可以实时接收转换进度');

                // 连接成功后加载最近任务
                this.requestTaskList();
            } catch (err) {
                console.error("❌ SignalR连接失败:", err);
                Utils.updateConnectionStatus('Failed');
                Utils.showAlert('danger', 'SignalR连接失败，进度更新可能不可用');

                // 5秒后重试连接
                setTimeout(() => this.startConnection(), 5000);
            }
        },

        // 注册事件监听器
        registerEventListeners: function() {
            console.log('📋 注册SignalR事件监听器...');

            // 监听进度更新
            connection.on("ProgressUpdate", (data) => {
                console.log("📊 收到进度更新:", data);
                this.handleProgressUpdate(data);
            });

            // 监听任务创建
            connection.on("TaskCreated", (data) => {
                console.log("📝 任务创建:", data);
                this.handleTaskCreated(data);
            });

            // 监听任务开始
            connection.on("TaskStarted", (data) => {
                console.log("🚀 任务开始:", data);
                this.handleTaskStarted(data);
            });

            // 监听任务完成
            connection.on("TaskCompleted", (data) => {
                console.log("✅ 任务完成:", data);
                this.handleTaskCompleted(data);
            });

            // 监听任务失败
            connection.on("TaskFailed", (data) => {
                console.log("❌ 任务失败:", data);
                this.handleTaskFailed(data);
            });

            // 监听上传开始
            connection.on("UploadStarted", (data) => {
                console.log("📤 上传开始:", data);
                const uploadContainer = document.getElementById('uploadProgressContainer');
                if (uploadContainer) {
                    uploadContainer.style.display = 'block';
                }
                const fileName = document.getElementById('uploadFileName');
                const totalSize = document.getElementById('totalSize');
                if (fileName && data.FileName) {
                    fileName.textContent = data.FileName;
                }
                if (totalSize && data.TotalSize) {
                    totalSize.textContent = Utils.formatFileSize(data.TotalSize);
                }
            });

            // 监听上传进度
            connection.on("UploadProgress", (data) => {
                console.log("📤 上传进度:", data);
                FileUpload.updateUploadProgress(data);
            });

            // 监听上传完成
            connection.on("UploadCompleted", (data) => {
                console.log("✅ 上传完成:", data);
                Utils.showAlert('success', `文件上传完成: ${data.FilePath}`);
                FileUpload.hideProgress();
            });

            // 监听上传失败
            connection.on("UploadFailed", (data) => {
                console.log("❌ 上传失败:", data);
                Utils.showAlert('danger', `上传失败: ${data.ErrorMessage}`);
                FileUpload.hideProgress();
            });

            // 监听任务状态响应
            connection.on("TaskStatus", (data) => {
                console.log("📊 收到任务状态:", data);
                if (data.taskId === currentTaskId) {
                    TaskManager.updateProgress({
                        taskId: data.taskId,
                        progress: data.progress,
                        message: data.status,
                        speed: data.conversionSpeed,
                        remainingSeconds: data.estimatedTimeRemaining
                    });
                }
            });

            // 监听任务状态变化（全局）
            connection.on("TaskStatusChanged", (data) => {
                console.log("📊 任务状态变化:", data);
                TaskManager.updateRecentTaskStatus(data.taskId, data.status);

                // 如果有进度信息，也更新进度
                if (data.progress !== undefined) {
                    TaskManager.updateRecentTaskProgress(data.taskId, data.progress, data.message);
                }
            });

            // 监听系统通知
            connection.on("SystemNotification", (data) => {
                console.log("📢 系统通知:", data);
                Utils.showAlert(data.type || 'info', data.message);
            });

            // 监听任务取消完成
            connection.on("TaskCancelCompleted", (data) => {
                console.log("🚫 任务取消完成:", data);
                if (data.taskId === currentTaskId) {
                    Utils.showAlert('success', '任务取消成功');
                    this.hideCurrentTask();
                    this.requestTaskList();
                }
            });

            // 监听错误
            connection.on("Error", (message) => {
                console.error("❌ SignalR错误:", message);
                Utils.showAlert('danger', 'SignalR错误: ' + message);
            });
        },

        // SignalR方法调用封装
        invoke: async function(methodName, ...args) {
            if (connection.state !== signalR.HubConnectionState.Connected) {
                throw new Error('SignalR连接未建立');
            }

            try {
                console.log(`📞 调用SignalR方法: ${methodName}`, args);
                const result = await connection.invoke(methodName, ...args);
                console.log(`✅ SignalR方法调用成功: ${methodName}`, result);
                return result;
            } catch (error) {
                console.error(`❌ SignalR方法调用失败: ${methodName}`, error);
                throw error;
            }
        },

        // 带超时的方法调用
        invokeWithTimeout: function(methodName, timeout = 30000, ...args) {
            return Promise.race([
                this.invoke(methodName, ...args),
                new Promise((_, reject) =>
                    setTimeout(() => reject(new Error('SignalR调用超时')), timeout)
                )
            ]);
        },

        // 带重试的方法调用
        invokeWithRetry: async function(methodName, maxRetries = 3, ...args) {
            let lastError;

            for (let i = 0; i < maxRetries; i++) {
                try {
                    return await this.invoke(methodName, ...args);
                } catch (error) {
                    lastError = error;
                    console.warn(`SignalR方法调用重试 ${i + 1}/${maxRetries}: ${methodName}`);

                    if (i < maxRetries - 1) {
                        await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)));
                    }
                }
            }

            throw lastError;
        },

        // 任务组管理
        joinTaskGroup: async function(taskId) {
            if (!taskId || connection.state !== signalR.HubConnectionState.Connected) {
                return;
            }

            try {
                await this.invoke("JoinTaskGroup", taskId);
                console.log(`✅ 已加入任务组: ${taskId}`);
            } catch (error) {
                console.error(`❌ 加入任务组失败: ${taskId}`, error);
            }
        },

        leaveTaskGroup: async function(taskId) {
            if (!taskId || connection.state !== signalR.HubConnectionState.Connected) {
                return;
            }

            try {
                await this.invoke("LeaveTaskGroup", taskId);
                console.log(`✅ 已离开任务组: ${taskId}`);
            } catch (error) {
                console.error(`❌ 离开任务组失败: ${taskId}`, error);
            }
        },

        // 常用SignalR方法
        getTaskStatus: async function(taskId) {
            try {
                return await this.invoke("GetTaskStatus", taskId);
            } catch (error) {
                Utils.showAlert('warning', '获取任务状态失败: ' + error.message);
            }
        },

        cancelTask: async function(taskId) {
            try {
                return await this.invoke("CancelTask", taskId);
            } catch (error) {
                Utils.showAlert('danger', '取消任务失败: ' + error.message);
            }
        },

        requestTaskList: async function() {
            try {
                return await this.invoke("GetRecentTasks", 10);
            } catch (error) {
                console.error('获取任务列表失败:', error);
            }
        },

        // 事件处理方法
        handleTaskCreated: function(data) {
            console.log('📝 处理任务创建:', data);
            // 延迟刷新以确保数据库已更新
            setTimeout(() => {
                if (TaskManager && typeof TaskManager.loadRecentTasks === 'function') {
                    TaskManager.loadRecentTasks();
                }
            }, 1000);
        },

        handleProgressUpdate: function(data) {
            console.log('📊 处理进度更新');
            TaskManager.updateProgress(data);
        },

        handleTaskStarted: function(data) {
            console.log('🚀 处理任务开始');
            currentTaskId = data.taskId;
            currentTaskStartTime = new Date();
            TaskManager.handleTaskStarted(data);
        },

        handleTaskCompleted: function(data) {
            console.log('✅ 处理任务完成');
            currentTaskId = null;
            currentTaskStartTime = null;
            TaskManager.handleTaskCompleted(data);
        },

        handleTaskFailed: function(data) {
            console.log('❌ 处理任务失败');
            currentTaskId = null;
            currentTaskStartTime = null;
            TaskManager.handleTaskFailed(data);
        },

        hideCurrentTask: function() {
            console.log('🚫 隐藏当前任务');
            TaskManager.hideCurrentTask();
        },

        // 连接健康检查
        checkConnectionHealth: function() {
            if (connection.state === signalR.HubConnectionState.Disconnected) {
                console.log('🔍 检测到连接断开，尝试重连...');
                this.startConnection();
            }
        },

        // 获取连接状态
        getConnectionState: function() {
            return connection.state;
        },

        // 获取连接对象
        getConnection: function() {
            return connection;
        },

        // 停止连接
        stopConnection: async function() {
            try {
                if (currentTaskId) {
                    await this.leaveTaskGroup(currentTaskId);
                }
                await connection.stop();
                console.log('🔌 SignalR连接已停止');
                Utils.updateConnectionStatus('Disconnected');
            } catch (error) {
                console.error('停止SignalR连接时出错:', error);
            }
        }
    };

    // 转换设置模块
    const ConversionSettings = {
        // 初始化
        init: function() {
            console.log('⚙️ 初始化转换设置模块...');

            this.bindEvents();
            this.loadDefaultSettings();

            console.log('✅ 转换设置模块初始化完成');
        },

        // 绑定事件
        bindEvents: function() {
            const $form = $('#conversionForm');
            const $presetSelect = $('#preset');
            const $qualitySlider = $('#videoQuality');
            const $qualityValue = $('#qualityValue');
            const $volumeSlider = $('#audioVolume');
            const $volumeValue = $('#volumeValue');
            const $qualityMode = $('#qualityMode');

            // 绑定表单提交事件
            $form.on('submit', (e) => {
                e.preventDefault();
                this.handleFormSubmit(e);
            });

            // 绑定预设选择变化事件
            $presetSelect.on('change', (e) => {
                this.updateAdvancedSettings(e.target.value);
            });

            // 绑定质量滑块事件
            $qualitySlider.on('input', (e) => {
                $qualityValue.text(e.target.value);
            });

            // 绑定音量滑块事件
            $volumeSlider.on('input', (e) => {
                $volumeValue.text(e.target.value);
            });

            // 绑定质量模式变化事件
            $qualityMode.on('change', (e) => {
                this.toggleQualityMode(e.target.value);
            });

            // 绑定音频质量模式变化事件
            $('#audioQualityMode').on('change', (e) => {
                this.toggleAudioQualityMode(e.target.value);
            });

            // 绑定编码器变化事件
            $('#videoCodec').on('change', (e) => {
                this.updateCodecSettings(e.target.value);
            });

            // 绑定硬件加速变化事件
            $('#hardwareAcceleration').on('change', (e) => {
                this.updateHardwareAcceleration(e.target.value);
            });

            // 绑定预设参数重置按钮
            this.bindPresetResetButton();
        },

        // 加载默认设置
        loadDefaultSettings: function() {
            console.log('📋 加载默认转换设置...');

            // 设置默认值
            $('#outputFormat').val('mp4');
            $('#videoCodec').val('libx264');
            $('#videoQuality').val('23');
            $('#qualityValue').text('23');
            $('#audioCodec').val('aac');
            $('#audioBitrate').val('192k');

            // 触发智能预设选择
            this.initializeSmartPresetSelection();
        },

        // 智能GPU预设选择
        initializeSmartPresetSelection: async function() {
            try {
                console.log('🔍 开始智能GPU预设选择...');

                // 检查GPU能力
                const gpuResponse = await fetch('/api/gpu/capabilities');
                const gpuData = await gpuResponse.json();

                if (gpuData.success && gpuData.data) {
                    const capabilities = gpuData.data;
                    console.log('GPU能力检测结果:', capabilities);

                    // 根据GPU类型选择预设
                    if (capabilities.nvidia && capabilities.nvidia.supported) {
                        this.selectBestGpuPreset('nvenc');
                        console.log('✅ 自动选择NVIDIA GPU预设');
                    } else if (capabilities.intel && capabilities.intel.supported) {
                        this.selectBestGpuPreset('qsv');
                        console.log('✅ 自动选择Intel GPU预设');
                    } else if (capabilities.amd && capabilities.amd.supported) {
                        this.selectBestGpuPreset('amf');
                        console.log('✅ 自动选择AMD GPU预设');
                    } else {
                        console.log('ℹ️ 未检测到GPU支持，使用默认CPU预设');
                        this.selectDefaultCpuPreset();
                    }
                } else {
                    console.log('⚠️ GPU检测失败，使用默认预设');
                    this.selectDefaultCpuPreset();
                }
            } catch (error) {
                console.error('❌ 智能预设选择失败:', error);
                this.selectDefaultCpuPreset();
            }
        },

        // 选择最佳GPU预设
        selectBestGpuPreset: function(gpuType) {
            const $presetSelect = $('#preset');

            // 预设优先级映射
            const presetPriority = {
                'nvenc': [
                    'gpu_fast_1080p_nvenc',
                    'gpu_hq_1080p_nvenc',
                    'gpu_4k_ultra_nvenc'
                ],
                'qsv': [
                    'gpu_fast_1080p_qsv',
                    'gpu_hq_1080p_qsv'
                ],
                'amf': [
                    'gpu_fast_1080p_amf',
                    'gpu_hq_1080p_amf'
                ]
            };

            const preferredPresets = presetPriority[gpuType] || [];

            // 按优先级查找并选择预设
            for (const presetValue of preferredPresets) {
                const $option = $presetSelect.find(`option[value="${presetValue}"]`);
                if ($option.length) {
                    $presetSelect.val(presetValue);
                    this.updateAdvancedSettings(presetValue);

                    // 显示GPU加速提示
                    this.showGpuAccelNotification($option.text(), gpuType);
                    return;
                }
            }
        },

        // 选择默认CPU预设
        selectDefaultCpuPreset: function() {
            const $presetSelect = $('#preset');

            // 查找CPU预设
            const $cpuOptions = $presetSelect.find('option[value*="cpu"]');
            if ($cpuOptions.length > 0) {
                const firstCpuPreset = $cpuOptions.first().val();
                $presetSelect.val(firstCpuPreset);
                this.updateAdvancedSettings(firstCpuPreset);
            }
        },

        // 显示GPU加速通知
        showGpuAccelNotification: function(presetName, gpuType) {
            const gpuTypeMap = {
                'nvenc': 'NVIDIA',
                'qsv': 'Intel',
                'amf': 'AMD'
            };

            const gpuName = gpuTypeMap[gpuType] || gpuType;
            Utils.showAlert('info', `🚀 已启用${gpuName} GPU硬件加速，转换速度将显著提升！`);
        },

        // 更新高级设置
        updateAdvancedSettings: function(presetValue) {
            console.log('⚙️ 更新高级设置:', presetValue);

            // 根据预设值获取配置
            const presetConfig = this.getPresetConfiguration(presetValue);

            if (presetConfig) {
                // 更新输出格式
                if (presetConfig.outputFormat) {
                    $('#outputFormat').val(presetConfig.outputFormat);
                }

                // 更新视频编解码器
                if (presetConfig.videoCodec) {
                    $('#videoCodec').val(presetConfig.videoCodec);
                }

                // 更新质量设置
                if (presetConfig.quality) {
                    $('#videoQuality').val(presetConfig.quality);
                    $('#qualityValue').text(presetConfig.quality);
                }

                // 更新分辨率
                if (presetConfig.resolution) {
                    $('#resolution').val(presetConfig.resolution);
                }

                // 更新音频设置
                if (presetConfig.audioCodec) {
                    $('#audioCodec').val(presetConfig.audioCodec);
                }

                if (presetConfig.audioBitrate) {
                    $('#audioBitrate').val(presetConfig.audioBitrate);
                }

                console.log('✅ 高级设置更新完成');
            }
        },

        // 获取预设配置
        getPresetConfiguration: function(presetValue) {
            const presetConfigs = {
                'gpu_fast_1080p_nvenc': {
                    outputFormat: 'mp4',
                    videoCodec: 'h264_nvenc',
                    resolution: '1920x1080',
                    quality: 23,
                    audioCodec: 'aac',
                    audioBitrate: '192k'
                },
                'gpu_hq_1080p_nvenc': {
                    outputFormat: 'mp4',
                    videoCodec: 'h264_nvenc',
                    resolution: '1920x1080',
                    quality: 18,
                    audioCodec: 'aac',
                    audioBitrate: '256k'
                },
                'gpu_4k_ultra_nvenc': {
                    outputFormat: 'mp4',
                    videoCodec: 'h264_nvenc',
                    resolution: '3840x2160',
                    quality: 20,
                    audioCodec: 'aac',
                    audioBitrate: '320k'
                },
                'gpu_fast_1080p_qsv': {
                    outputFormat: 'mp4',
                    videoCodec: 'h264_qsv',
                    resolution: '1920x1080',
                    quality: 23,
                    audioCodec: 'aac',
                    audioBitrate: '192k'
                },
                'gpu_hq_1080p_qsv': {
                    outputFormat: 'mp4',
                    videoCodec: 'h264_qsv',
                    resolution: '1920x1080',
                    quality: 18,
                    audioCodec: 'aac',
                    audioBitrate: '256k'
                },
                'gpu_fast_1080p_amf': {
                    outputFormat: 'mp4',
                    videoCodec: 'h264_amf',
                    resolution: '1920x1080',
                    quality: 23,
                    audioCodec: 'aac',
                    audioBitrate: '192k'
                },
                'gpu_hq_1080p_amf': {
                    outputFormat: 'mp4',
                    videoCodec: 'h264_amf',
                    resolution: '1920x1080',
                    quality: 18,
                    audioCodec: 'aac',
                    audioBitrate: '256k'
                },
                'cpu_standard_1080p': {
                    outputFormat: 'mp4',
                    videoCodec: 'libx264',
                    resolution: '1920x1080',
                    quality: 23,
                    audioCodec: 'aac',
                    audioBitrate: '192k'
                },
                'cpu_hq_1080p': {
                    outputFormat: 'mp4',
                    videoCodec: 'libx264',
                    resolution: '1920x1080',
                    quality: 18,
                    audioCodec: 'aac',
                    audioBitrate: '256k'
                }
            };

            return presetConfigs[presetValue] || null;
        },

        // 表单提交处理
        handleFormSubmit: async function(e) {
            console.log('📤 处理表单提交...');

            const $fileInput = $('#videoFile');
            const file = $fileInput[0].files[0];

            if (!file) {
                Utils.showAlert('warning', '请选择要转换的视频文件');
                return;
            }

            // 验证表单数据
            if (!this.validateFormData()) {
                return;
            }

            try {
                // 更新提交按钮状态
                this.updateSubmitButtonState('submitting');

                // 检查文件大小，决定使用哪种上传方式
                const isLargeFile = file.size > 100 * 1024 * 1024; // 100MB

                let result;
                if (isLargeFile) {
                    result = await this.handleLargeFileUpload(file, e.target);
                } else {
                    result = await this.handleNormalFileUpload(e.target);
                }

                if (result.success) {
                    // 处理转换成功，显示当前任务
                    await this.handleConversionSuccess(result);
                } else {
                    throw new Error(result.message || '提交失败');
                }
            } catch (error) {
                console.error('表单提交失败:', error);
                Utils.showAlert('danger', '提交失败: ' + error.message);
            } finally {
                // 恢复提交按钮状态
                this.updateSubmitButtonState('normal');
            }
        },

        // 处理大文件上传（参考index copy.cshtml的逻辑）
        handleLargeFileUpload: async function(file, form) {
            console.log('📤 处理大文件上传:', file.name);

            try {
                // 创建FormData
                const formData = new FormData();
                formData.append('videoFile', file);

                // 添加其他表单数据
                const formElements = new FormData(form);
                for (let [key, value] of formElements.entries()) {
                    if (key !== 'videoFile') {
                        formData.append(key, value);
                    }
                }

                // 处理复选框值（如果存在的话）
                const checkboxes = ['twoPass', 'fastStart', 'copyTimestamps'];
                checkboxes.forEach(name => {
                    const checkbox = document.getElementById(name);
                    if (checkbox && checkbox.type === 'checkbox') {
                        formData.delete(name);
                        formData.append(name, checkbox.checked ? 'true' : 'false');
                        console.log(`处理复选框 ${name}: ${checkbox.checked}`);
                    }
                });

                // 处理deinterlace字段 - 转换为布尔值（如果存在的话）
                const deinterlaceSelect = document.getElementById('deinterlace');
                if (deinterlaceSelect && deinterlaceSelect.tagName === 'SELECT') {
                    formData.delete('deinterlace');
                    // 如果选择了去隔行扫描方法（不是空值），则为true
                    const deinterlaceValue = deinterlaceSelect.value && deinterlaceSelect.value !== '';
                    formData.append('deinterlace', deinterlaceValue ? 'true' : 'false');
                    console.log(`处理deinterlace: ${deinterlaceValue}`);
                }

                // 显示上传进度
                FileUpload.showProgress();

                const response = await fetch('/api/upload/large-file', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`上传失败 (${response.status}): ${errorText}`);
                }

                const result = await response.json();
                console.log('✅ 大文件上传结果:', result);

                FileUpload.hideProgress();
                return result;
            } catch (error) {
                console.error('❌ 大文件上传失败:', error);
                FileUpload.hideProgress();
                throw error;
            }
        },

        // 验证表单数据
        validateFormData: function() {
            const preset = $('#preset').val();
            if (!preset) {
                Utils.showAlert('warning', '请选择转换预设');
                return false;
            }

            // 验证视频质量范围
            const qualityMode = $('#qualityMode').val();
            if (qualityMode === 'crf') {
                const quality = parseInt($('#videoQuality').val());
                if (quality < 0 || quality > 51) {
                    Utils.showAlert('warning', 'CRF质量值应在0-51之间');
                    return false;
                }
            } else if (qualityMode === 'bitrate' || qualityMode === 'vbr') {
                const bitrate = parseInt($('#videoBitrate').val());
                if (bitrate < 100 || bitrate > 50000) {
                    Utils.showAlert('warning', '视频比特率应在100-50000 kbps之间');
                    return false;
                }
            }

            // 验证高级设置
            if (!this.validateAdvancedSettings()) {
                return false;
            }

            return true;
        },

        // 普通文件上传
        handleNormalFileUpload: async function(form) {
            console.log('📤 处理普通文件上传...');

            const formData = new FormData(form);

            // 处理复选框值（如果存在的话）
            const checkboxes = ['twoPass', 'fastStart', 'copyTimestamps'];
            checkboxes.forEach(name => {
                const checkbox = document.getElementById(name);
                if (checkbox && checkbox.type === 'checkbox') {
                    formData.delete(name);
                    formData.append(name, checkbox.checked ? 'true' : 'false');
                    console.log(`处理复选框 ${name}: ${checkbox.checked}`);
                }
            });

            // 处理deinterlace字段 - 转换为布尔值（如果存在的话）
            const deinterlaceSelect = document.getElementById('deinterlace');
            if (deinterlaceSelect && deinterlaceSelect.tagName === 'SELECT') {
                formData.delete('deinterlace');
                // 如果选择了去隔行扫描方法（不是空值），则为true
                const deinterlaceValue = deinterlaceSelect.value && deinterlaceSelect.value !== '';
                formData.append('deinterlace', deinterlaceValue ? 'true' : 'false');
                console.log(`处理deinterlace: ${deinterlaceValue}`);
            }

            const response = await fetch('/api/conversion/start', {
                method: 'POST',
                body: formData
            });

            return await response.json();
        },

        // 更新提交按钮状态
        updateSubmitButtonState: function(state) {
            const $button = $('#startConversion');

            switch (state) {
                case 'submitting':
                    $button.prop('disabled', true)
                        .html('<i class="fas fa-spinner fa-spin"></i> 提交中...');
                    break;
                case 'normal':
                default:
                    $button.prop('disabled', false)
                        .html('<i class="fas fa-play"></i> 开始转换');
                    break;
            }
        },

        // 获取当前设置
        getCurrentSettings: function() {
            return {
                preset: $('#preset').val(),
                outputFormat: $('#outputFormat').val(),
                resolution: $('#resolution').val(),
                videoCodec: $('#videoCodec').val(),
                videoQuality: $('#videoQuality').val(),
                audioCodec: $('#audioCodec').val(),
                audioBitrate: $('#audioBitrate').val()
            };
        },

        // 应用设置
        applySettings: function(settings) {
            if (settings.preset) $('#preset').val(settings.preset);
            if (settings.outputFormat) $('#outputFormat').val(settings.outputFormat);
            if (settings.resolution) $('#resolution').val(settings.resolution);
            if (settings.videoCodec) $('#videoCodec').val(settings.videoCodec);
            if (settings.videoQuality) {
                $('#videoQuality').val(settings.videoQuality);
                $('#qualityValue').text(settings.videoQuality);
            }
            if (settings.audioCodec) $('#audioCodec').val(settings.audioCodec);
            if (settings.audioBitrate) $('#audioBitrate').val(settings.audioBitrate);
        },

        // 处理转换成功（参考index copy.cshtml）
        handleConversionSuccess: async function(result) {
            console.log("🎯 处理转换成功:", result);

            // 设置当前任务ID
            VideoConversionApp.currentTaskId = result.taskId || result.data?.taskId;
            console.log("🎯 设置当前任务ID:", VideoConversionApp.currentTaskId);

            // 获取文件信息
            const $fileInput = $('#videoFile');
            const file = $fileInput[0].files[0];
            const outputFormat = $('#outputFormat').val() || 'mp4';

            const taskData = {
                originalFileName: file?.name || result.fileName || '',
                outputFormat: outputFormat,
                fileSize: file?.size || result.fileSize || 0
            };

            // 显示当前任务
            this.showCurrentTask(result.taskName || result.data?.taskName || '转换任务', taskData);

            // 加入任务组以接收进度更新
            const connection = SignalRManager.getConnection();
            if (connection && connection.state === signalR.HubConnectionState.Connected) {
                try {
                    await connection.invoke("JoinTaskGroup", VideoConversionApp.currentTaskId);
                    console.log("✅ 已加入任务组:", VideoConversionApp.currentTaskId);
                } catch (error) {
                    console.error("❌ 加入任务组失败:", error);
                }
            } else {
                console.warn("⚠️ SignalR连接未建立，无法加入任务组");
                Utils.showAlert('warning', 'SignalR连接未建立，可能无法实时显示进度');
            }

            // 显示成功消息
            Utils.showAlert('success', `转换任务已创建: ${result.taskName || result.data?.taskName || '转换任务'}`);

            // 立即刷新最近任务列表
            setTimeout(() => {
                if (TaskManager && typeof TaskManager.loadRecentTasks === 'function') {
                    TaskManager.loadRecentTasks();
                }
            }, 500);
        },

        // 显示当前任务（参考index copy.cshtml）
        showCurrentTask: function(taskName, taskData = null) {
            console.log("📝 显示当前任务:", taskName, taskData);

            VideoConversionApp.currentTaskStartTime = Date.now();

            // 显示当前任务卡片
            $('#currentTaskCard').show();
            $('#currentTaskName').text(taskName);

            // 显示任务ID
            if (VideoConversionApp.currentTaskId) {
                $('#taskId').text(`ID: ${VideoConversionApp.currentTaskId.substring(0, 8)}...`);
            }

            // 显示文件信息
            if (taskData) {
                const $fileInfo = $('#fileInfo');
                const $originalFileName = $('#originalFileName');
                const $outputFormat = $('#outputFormat');
                const $fileSize = $('#fileSize');

                if (taskData.originalFileName) {
                    $originalFileName.text(taskData.originalFileName);
                    $fileInfo.show();
                }

                if (taskData.outputFormat) {
                    $outputFormat.text(taskData.outputFormat.toUpperCase());
                }

                if (taskData.fileSize) {
                    $fileSize.text(Utils.formatFileSize(taskData.fileSize));
                }
            }

            // 重置进度条
            const $progressBar = $('#progressBar');
            $progressBar.removeClass().addClass('progress-bar progress-bar-striped progress-bar-animated');
            $progressBar.css('width', '0%');
            $progressBar.attr('aria-valuenow', 0);
            $progressBar.find('span').text('0%');

            // 重置状态信息
            $('#taskStatus').text('准备中...');
            const $statusAlert = $('#taskStatusAlert');
            $statusAlert.removeClass().addClass('alert alert-info mb-3');

            // 重置其他信息
            $('#conversionSpeed').text('-');
            $('#remainingTime').text('-');
            $('#elapsedTime').text('-');

            // 设置按钮为转换中状态
            ConversionSettings.updateTaskActionButtons('converting');
        },

        // 更新任务操作按钮状态
        updateTaskActionButtons: function(state) {
            const $cancelTask = $('#cancelTask');
            const $refreshTask = $('#refreshTask');
            const $downloadTask = $('#downloadTask');
            const $restartTask = $('#restartTask');

            // 隐藏所有按钮
            $refreshTask.hide();
            $downloadTask.hide();
            $restartTask.hide();

            switch (state) {
                case 'converting':
                    $cancelTask.show().prop('disabled', false);
                    break;
                case 'completed':
                    $cancelTask.hide();
                    $downloadTask.show();
                    $restartTask.show();
                    break;
                case 'failed':
                    $cancelTask.hide();
                    $refreshTask.show();
                    $restartTask.show();
                    break;
                case 'cancelled':
                    $cancelTask.hide();
                    $restartTask.show();
                    break;
                default:
                    $cancelTask.show().prop('disabled', true);
                    break;
            }
        },

        // 切换质量模式
        toggleQualityMode: function(mode) {
            console.log('🎛️ 切换质量模式:', mode);

            const $crfContainer = $('#crfQualityContainer');
            const $bitrateContainer = $('#bitrateContainer');

            if (mode === 'crf') {
                $crfContainer.show();
                $bitrateContainer.hide();
            } else if (mode === 'bitrate' || mode === 'vbr' || mode === '2pass') {
                $crfContainer.hide();
                $bitrateContainer.show();
            }
        },

        // 切换音频质量模式
        toggleAudioQualityMode: function(mode) {
            console.log('🎵 切换音频质量模式:', mode);

            const $bitrateContainer = $('#audioBitrateContainer');

            // 根据模式显示不同的控件
            if (mode === 'bitrate' || mode === 'vbr') {
                $bitrateContainer.show();
            } else if (mode === 'quality') {
                $bitrateContainer.show();
                // 可以在这里添加质量等级选项
            }
        },

        // 更新编码器设置
        updateCodecSettings: function(codec) {
            console.log('🎬 更新编码器设置:', codec);

            // 根据编码器类型更新相关设置
            const $profile = $('#profile');
            const $encodingPreset = $('#encodingPreset');

            if (codec.includes('nvenc') || codec.includes('qsv') || codec.includes('amf')) {
                // GPU编码器
                this.updateGpuCodecSettings(codec);
            } else if (codec.includes('libx264') || codec.includes('libx265')) {
                // CPU编码器
                this.updateCpuCodecSettings(codec);
            }
        },

        // 更新GPU编码器设置
        updateGpuCodecSettings: function(codec) {
            const $encodingPreset = $('#encodingPreset');

            // GPU编码器通常有不同的预设选项
            if (codec.includes('nvenc')) {
                // NVIDIA编码器预设
                $encodingPreset.html(`
                    <option value="p1">P1 (最快)</option>
                    <option value="p2">P2 (快)</option>
                    <option value="p3">P3 (中等)</option>
                    <option value="p4" selected>P4 (平衡)</option>
                    <option value="p5">P5 (慢)</option>
                    <option value="p6">P6 (较慢)</option>
                    <option value="p7">P7 (最慢)</option>
                `);
            } else {
                // 其他GPU编码器使用标准预设
                this.resetEncodingPresets();
            }
        },

        // 更新CPU编码器设置
        updateCpuCodecSettings: function(codec) {
            this.resetEncodingPresets();
        },

        // 重置编码预设选项
        resetEncodingPresets: function() {
            const $encodingPreset = $('#encodingPreset');
            $encodingPreset.html(`
                <option value="ultrafast">极快 (最低质量)</option>
                <option value="superfast">超快</option>
                <option value="veryfast">很快</option>
                <option value="faster">较快</option>
                <option value="fast">快</option>
                <option value="medium" selected>中等 (推荐)</option>
                <option value="slow">慢</option>
                <option value="slower">较慢</option>
                <option value="veryslow">很慢 (最高质量)</option>
            `);
        },

        // 更新硬件加速设置
        updateHardwareAcceleration: function(acceleration) {
            console.log('⚡ 更新硬件加速设置:', acceleration);

            const $videoCodec = $('#videoCodec');

            if (acceleration === 'nvenc') {
                // 自动选择NVIDIA编码器
                $videoCodec.val('h264_nvenc');
                this.updateCodecSettings('h264_nvenc');
            } else if (acceleration === 'qsv') {
                // 自动选择Intel编码器
                $videoCodec.val('h264_qsv');
                this.updateCodecSettings('h264_qsv');
            } else if (acceleration === 'amf') {
                // 自动选择AMD编码器
                $videoCodec.val('h264_amf');
                this.updateCodecSettings('h264_amf');
            } else if (acceleration === 'none') {
                // 使用CPU编码器
                $videoCodec.val('libx264');
                this.updateCodecSettings('libx264');
            }
        },

        // 绑定预设重置按钮
        bindPresetResetButton: function() {
            // 添加重置按钮到预设选择旁边
            const $presetContainer = $('#preset').parent();
            if ($presetContainer.find('.preset-reset-btn').length === 0) {
                const $resetBtn = $(`
                    <button type="button" class="btn btn-outline-secondary btn-sm mt-2 preset-reset-btn">
                        <i class="fas fa-undo"></i> 重置为默认设置
                    </button>
                `);

                $resetBtn.on('click', () => {
                    this.resetToDefaultSettings();
                });

                $presetContainer.append($resetBtn);
            }
        },

        // 重置为默认设置
        resetToDefaultSettings: function() {
            console.log('🔄 重置为默认设置...');

            // 重置所有表单控件
            $('#preset').val('');
            $('#outputFormat').val('mp4');
            $('#resolution').val('');
            $('#videoCodec').val('libx264');
            $('#qualityMode').val('crf');
            $('#videoQuality').val('23');
            $('#qualityValue').text('23');
            $('#encodingPreset').val('medium');
            $('#profile').val('');
            $('#frameRate').val('');

            // 重置音频设置
            $('#audioCodec').val('aac');
            $('#audioQualityMode').val('bitrate');
            $('#audioQuality').val('192k');
            $('#audioChannels').val('');
            $('#sampleRate').val('');
            $('#audioVolume').val('0');
            $('#volumeValue').text('0');

            // 重置高级设置
            $('#hardwareAcceleration').val('auto');
            $('#twoPass').val('false');
            $('#pixelFormat').val('');
            $('#colorSpace').val('');
            $('#fastStart').prop('checked', true);
            $('#deinterlace').prop('checked', false);

            // 重置滤镜设置
            $('#denoise').val('');
            $('#videoFilters').val('');
            $('#audioFilters').val('');

            // 重置时间裁剪
            $('#startTime').val('');
            $('#endTime').val('');

            // 重置任务设置
            $('#priority').val('0');
            $('#tags').val('');
            $('#notes').val('');
            $('#customParams').val('');

            // 触发相关事件
            this.toggleQualityMode('crf');
            this.toggleAudioQualityMode('bitrate');

            Utils.showAlert('success', '设置已重置为默认值');
        },

        // 验证高级参数
        validateAdvancedSettings: function() {
            // 验证时间格式
            const startTime = $('#startTime').val();
            const endTime = $('#endTime').val();

            if (startTime && !this.isValidTimeFormat(startTime)) {
                Utils.showAlert('warning', '开始时间格式不正确，请使用 HH:MM:SS 或秒数格式');
                return false;
            }

            if (endTime && !this.isValidTimeFormat(endTime)) {
                Utils.showAlert('warning', '结束时间格式不正确，请使用 HH:MM:SS 或秒数格式');
                return false;
            }

            // 验证自定义滤镜语法（基础检查）
            const videoFilters = $('#videoFilters').val();
            const audioFilters = $('#audioFilters').val();

            if (videoFilters && videoFilters.includes('..')) {
                Utils.showAlert('warning', '视频滤镜语法可能有误，请检查');
                return false;
            }

            if (audioFilters && audioFilters.includes('..')) {
                Utils.showAlert('warning', '音频滤镜语法可能有误，请检查');
                return false;
            }

            return true;
        },

        // 验证时间格式
        isValidTimeFormat: function(timeStr) {
            // 支持 HH:MM:SS 格式或纯数字（秒）
            const timeRegex = /^(\d{1,2}:\d{2}:\d{2}|\d+(\.\d+)?)$/;
            return timeRegex.test(timeStr);
        }
    };

    // 任务管理模块
    const TaskManager = {
        // 初始化
        init: function() {
            console.log('📊 初始化任务管理模块...');

            this.bindEvents();
            this.loadRecentTasks();

            console.log('✅ 任务管理模块初始化完成');
        },

        // 绑定事件
        bindEvents: function() {
            const $cancelBtn = $('#cancelTask');
            const $refreshBtn = $('#refreshTask');
            const $restartBtn = $('#restartTask');

            // 取消任务按钮
            $cancelBtn.on('click', () => {
                if (currentTaskId) {
                    this.cancelCurrentTask();
                }
            });

            // 刷新任务状态按钮
            $refreshBtn.on('click', () => {
                if (currentTaskId) {
                    this.refreshTaskStatus(currentTaskId);
                }
            });

            // 重新开始任务按钮
            $restartBtn.on('click', () => {
                this.restartTask();
            });
        },

        // 任务开始处理
        handleTaskStarted: function(data) {
            console.log('🚀 任务开始:', data);

            currentTaskId = data.taskId;
            currentTaskStartTime = new Date();

            // 显示当前任务
            this.showCurrentTask(data);

            // 加入任务组以接收进度更新
            SignalRManager.joinTaskGroup(data.taskId);

            // 开始计时
            this.startTaskTimer();

            // 更新UI状态
            ConversionSettings.updateTaskActionButtons('converting');

            // 显示通知
            Utils.showAlert('info', `转换任务已开始: ${data.fileName || data.taskId}`);
        },

        // 显示当前任务
        showCurrentTask: function(data) {
            console.log('📋 显示当前任务');

            const $currentTaskCard = $('#currentTaskCard');
            const $taskName = $('#currentTaskName');
            const $taskId = $('#taskId');
            const $originalFileName = $('#originalFileName');
            const $fileInfo = $('#fileInfo');

            // 更新任务信息
            $taskName.text(data.fileName || data.taskName || data.taskId);
            $taskId.text(data.taskId);

            // 显示文件信息
            if (data.fileName) {
                $originalFileName.text(data.fileName);
                $fileInfo.show();
            }

            // 重置进度条
            this.resetProgressBar();

            // 显示任务容器
            $currentTaskCard.show();
        },

        // 重置进度条
        resetProgressBar: function() {
            const $progressBar = $('#progressBar');
            $progressBar.css('width', '0%')
                .attr('aria-valuenow', '0')
                .removeClass('bg-success bg-danger')
                .addClass('progress-bar-striped progress-bar-animated')
                .find('span').text('0%');
        },

        // 进度更新防抖控制
        progressUpdateTimeout: null,
        lastProgressData: null,

        // 进度更新处理（优化版本）
        updateProgress: function(data) {
            if (!data || !data.taskId || data.taskId !== currentTaskId) return;

            console.log('📊 收到进度更新:', data.progress + '%');

            // 保存最新数据
            this.lastProgressData = data;

            // 清除之前的更新计时器
            if (this.progressUpdateTimeout) {
                clearTimeout(this.progressUpdateTimeout);
            }

            // 立即更新关键信息（进度百分比）
            this.updateProgressBarImmediate(data);

            // 延迟更新其他信息（防抖）
            this.progressUpdateTimeout = setTimeout(() => {
                this.updateProgressDetails(this.lastProgressData);
            }, 100); // 100ms防抖
        },

        // 立即更新进度条
        updateProgressBarImmediate: function(data) {
            const $progressBar = $('#progressBar');
            if ($progressBar.length) {
                // 使用CSS过渡实现平滑动画
                $progressBar.css({
                    'width': `${data.progress}%`,
                    'transition': 'width 0.3s ease-out'
                }).attr('aria-valuenow', data.progress);

                // 更新进度文本
                $progressBar.find('span').text(`${data.progress}%`);

                // 根据进度调整样式
                if (data.progress >= 100) {
                    $progressBar.removeClass('progress-bar-striped progress-bar-animated')
                        .addClass('bg-success');

                    // 如果进度达到100%，更新按钮状态（防止TaskCompleted事件丢失）
                    setTimeout(() => {
                        if (data.progress >= 100) {
                            ConversionSettings.updateTaskActionButtons('completed');
                            $('#taskStatus').text('转换完成！');
                            const $statusAlert = $('#taskStatusAlert');
                            $statusAlert.removeClass().addClass('alert alert-success mb-3');

                            // 同时更新最近任务中的进度
                            if (data.taskId) {
                                TaskManager.updateRecentTaskProgress(data.taskId, 100);
                            }
                        }
                    }, 1000); // 延迟1秒，给TaskCompleted事件机会
                } else if (data.progress >= 80) {
                    $progressBar.addClass('progress-bar-striped progress-bar-animated bg-info')
                        .removeClass('bg-success');
                } else {
                    $progressBar.addClass('progress-bar-striped progress-bar-animated')
                        .removeClass('bg-success bg-info');
                }
            }
        },

        // 更新进度详细信息
        updateProgressDetails: function(data) {
            if (!data) return;

            // 更新任务详细信息
            this.updateTaskDetails(data);

            // 更新最近任务列表中的进度
            this.updateRecentTaskProgress(data.taskId, data.progress);

            // 如果有速度信息，显示预计剩余时间
            if (data.speed && data.remainingSeconds !== undefined) {
                const $taskStatus = $('#taskStatus');
                if ($taskStatus.length) {
                    const timeText = data.remainingSeconds > 0 ?
                        `预计剩余: ${Utils.formatTime(data.remainingSeconds)}` :
                        '即将完成';
                    $taskStatus.html(`
                        <div>${data.message || '正在转换...'}</div>
                        <small class="text-muted">速度: ${data.speed} | ${timeText}</small>
                    `);
                }
            }
        },

        // 更新任务详细信息
        updateTaskDetails: function(data) {
            // 更新转换速度
            if (data.speed) {
                $('#conversionSpeed').text(Utils.formatSpeed(data.speed));
            }

            // 更新剩余时间
            if (data.remainingSeconds) {
                $('#remainingTime').text(Utils.formatTime(data.remainingSeconds));
            }

            // 更新已用时间
            if (currentTaskStartTime) {
                const elapsedSeconds = Math.floor((new Date() - currentTaskStartTime) / 1000);
                $('#elapsedTime').text(Utils.formatTime(elapsedSeconds));
            }

            // 更新状态消息
            if (data.message) {
                $('#taskStatus').text(data.message);
            }
        },

        // 任务完成处理
        handleTaskCompleted: function(data) {
            console.log('✅ 任务完成:', data);

            currentTaskId = null;
            currentTaskStartTime = null;

            // 更新进度条为100%
            const $progressBar = $('#progressBar');
            $progressBar.css('width', '100%')
                .attr('aria-valuenow', '100')
                .removeClass('progress-bar-animated')
                .addClass('bg-success')
                .find('span').text('100%');

            // 更新状态
            this.updateTaskStatus('转换完成！', 'success');

            // 显示下载按钮
            if (data.downloadUrl) {
                this.showDownloadButton(data.downloadUrl, data.fileName);
            }

            // 更新操作按钮
            ConversionSettings.updateTaskActionButtons('completed');

            // 立即更新最近任务中的进度为100%
            if (data.taskId) {
                this.updateRecentTaskProgress(data.taskId, 100);
            }

            // 刷新最近任务列表
            this.loadRecentTasks();

            // 显示成功消息
            const duration = data.duration ? ` (耗时: ${Utils.formatTime(data.duration)})` : '';
            Utils.showAlert('success', `转换完成: ${data.fileName || data.taskId}${duration}`);
        },

        // 任务失败处理
        handleTaskFailed: function(data) {
            console.log('❌ 任务失败:', data);

            currentTaskId = null;
            currentTaskStartTime = null;

            // 更新进度条样式
            const $progressBar = $('#progressBar');
            $progressBar.removeClass('progress-bar-animated')
                .addClass('bg-danger');

            // 更新状态
            this.updateTaskStatus(`转换失败: ${data.error || '未知错误'}`, 'danger');

            // 更新操作按钮
            ConversionSettings.updateTaskActionButtons('failed');

            // 刷新最近任务列表
            this.loadRecentTasks();

            // 显示错误消息
            Utils.showAlert('danger', `转换失败: ${data.fileName || data.taskId} - ${data.error || '未知错误'}`);
        },

        // 取消当前任务
        cancelCurrentTask: async function() {
            if (!currentTaskId) return;

            try {
                const result = await SignalRManager.cancelTask(currentTaskId);

                if (result && result.success) {
                    Utils.showAlert('info', '任务取消请求已发送');
                } else {
                    throw new Error(result?.message || '取消失败');
                }
            } catch (error) {
                console.error('取消任务失败:', error);
                Utils.showAlert('danger', '取消任务失败: ' + error.message);
            }
        },

        // 刷新任务状态
        refreshTaskStatus: async function(taskId) {
            if (!taskId || SignalRManager.getConnectionState() !== signalR.HubConnectionState.Connected) {
                Utils.showAlert('warning', '无法刷新任务状态：连接不可用');
                return;
            }

            try {
                await SignalRManager.getTaskStatus(taskId);
                Utils.showAlert('info', '已请求刷新任务状态');
            } catch (error) {
                console.error('刷新任务状态失败:', error);
                Utils.showAlert('danger', '刷新失败: ' + error.message);
            }
        },

        // 重启任务
        restartTask: function() {
            // 重置表单并重新开始
            const $form = $('#conversionForm');
            if ($form.length) {
                // 清除当前任务显示
                this.hideCurrentTask();

                // 重新提交表单
                $form.trigger('submit');
            }
        },

        // 隐藏当前任务
        hideCurrentTask: function() {
            $('#currentTaskCard').hide();

            currentTaskId = null;
            currentTaskStartTime = null;

            // 清理计时器
            if (window.taskTimer) {
                clearInterval(window.taskTimer);
                window.taskTimer = null;
            }
        },

        // 更新任务状态显示
        updateTaskStatus: function(message, type) {
            const $statusAlert = $('#taskStatusAlert');
            const $statusElement = $('#taskStatus');

            $statusElement.text(message);
            $statusAlert.removeClass('alert-info alert-success alert-danger alert-warning')
                .addClass(`alert-${type}`);
        },

        // 显示下载按钮
        showDownloadButton: function(downloadUrl, fileName) {
            const $downloadBtn = $('#downloadTask');
            $downloadBtn.attr('href', downloadUrl)
                .attr('download', fileName || 'converted_video')
                .show();
        },

        // 更新任务操作按钮状态
        updateTaskActionButtons: function(status) {
            const $cancelBtn = $('#cancelTask');
            const $refreshBtn = $('#refreshTask');
            const $downloadBtn = $('#downloadTask');
            const $restartBtn = $('#restartTask');

            // 隐藏所有按钮
            [$cancelBtn, $refreshBtn, $downloadBtn, $restartBtn].forEach($btn => {
                $btn.hide();
            });

            // 根据状态显示相应按钮
            switch (status) {
                case 'converting':
                    $cancelBtn.show();
                    $refreshBtn.show();
                    break;
                case 'completed':
                    $downloadBtn.show();
                    $restartBtn.show();
                    break;
                case 'failed':
                    $refreshBtn.show();
                    $restartBtn.show();
                    break;
            }
        },

        // 加载最近任务
        loadRecentTasks: async function() {
            try {
                const response = await fetch('/api/conversion/recent?count=10');
                const result = await response.json();

                if (result.success) {
                    this.displayRecentTasks(result.data);
                } else {
                    console.error('加载最近任务失败:', result.message);
                }
            } catch (error) {
                console.error('加载最近任务失败:', error);
                // 显示模拟数据用于演示
                this.displayRecentTasks(this.getMockRecentTasks());
            }
        },

        // 显示最近任务
        displayRecentTasks: function(tasks) {
            const $recentTasksDiv = $('#recentTasks');

            if (!tasks || tasks.length === 0) {
                $recentTasksDiv.html('<p class="text-muted text-center">暂无最近任务</p>');
                return;
            }

            let html = '';
            tasks.forEach(task => {
                const statusClass = this.getTaskStatusClass(task.status);
                const statusIcon = this.getTaskStatusIcon(task.status);
                const statusText = this.getTaskStatusText(task.status);

                html += `
                    <div class="card mb-2 task-item" data-task-id="${task.taskId}">
                        <div class="card-body p-3">
                            <div class="d-flex justify-content-between align-items-start">
                                <div class="flex-grow-1">
                                    <h6 class="card-title mb-1">${task.fileName || task.taskName}</h6>
                                    <small class="text-muted">
                                        <i class="fas fa-clock"></i> ${this.formatDateTime(task.createdAt)}
                                    </small>
                                </div>
                                <span class="badge bg-${statusClass}">
                                    <i class="fas fa-${statusIcon}"></i> ${statusText}
                                </span>
                            </div>
                            ${task.progress !== undefined ? `
                                <div class="progress mt-2" style="height: 4px;">
                                    <div class="progress-bar bg-${statusClass}"
                                         style="width: ${task.progress}%"></div>
                                </div>
                                <small class="text-muted">${task.progress}% 完成</small>
                            ` : ''}
                            ${task.downloadUrl ? `
                                <div class="mt-2">
                                    <a href="${task.downloadUrl}" class="btn btn-outline-success btn-sm"
                                       download="${task.fileName}">
                                        <i class="fas fa-download"></i> 下载
                                    </a>
                                </div>
                            ` : ''}
                        </div>
                    </div>
                `;
            });

            $recentTasksDiv.html(html);

            // 绑定任务点击事件
            this.bindRecentTaskEvents();
        },

        // 获取任务状态样式类
        getTaskStatusClass: function(status) {
            const statusMap = {
                // 英文状态（与ConversionStatus枚举对应）
                'Completed': 'success',
                'Failed': 'danger',
                'Converting': 'primary',
                'Pending': 'warning',
                'Cancelled': 'secondary',
                // 中文状态支持
                '已完成': 'success',
                '失败': 'danger',
                '转换中': 'primary',
                '等待中': 'warning',
                '已取消': 'secondary',
                // 枚举值支持
                '0': 'warning',    // Pending
                '1': 'primary',    // Converting
                '2': 'success',    // Completed
                '3': 'danger',     // Failed
                '4': 'secondary'   // Cancelled
            };
            return statusMap[status] || 'secondary';
        },

        // 获取任务状态图标
        getTaskStatusIcon: function(status) {
            const iconMap = {
                // 英文状态（与ConversionStatus枚举对应）
                'Completed': 'check-circle',
                'Failed': 'exclamation-triangle',
                'Converting': 'cog fa-spin',
                'Pending': 'clock',
                'Cancelled': 'times-circle',
                // 中文状态支持
                '已完成': 'check-circle',
                '失败': 'exclamation-triangle',
                '转换中': 'cog fa-spin',
                '等待中': 'clock',
                '已取消': 'times-circle',
                // 枚举值支持
                '0': 'clock',           // Pending
                '1': 'cog fa-spin',     // Converting
                '2': 'check-circle',    // Completed
                '3': 'exclamation-triangle', // Failed
                '4': 'times-circle'     // Cancelled
            };
            return iconMap[status] || 'question-circle';
        },

        // 获取任务状态显示文本
        getTaskStatusText: function(status) {
            const textMap = {
                // 英文状态
                'Completed': '已完成',
                'Failed': '失败',
                'Converting': '转换中',
                'Pending': '等待中',
                'Cancelled': '已取消',
                // 中文状态（直接返回）
                '已完成': '已完成',
                '失败': '失败',
                '转换中': '转换中',
                '等待中': '等待中',
                '已取消': '已取消',
                // 枚举值转换
                '0': '等待中',    // Pending
                '1': '转换中',    // Converting
                '2': '已完成',    // Completed
                '3': '失败',      // Failed
                '4': '已取消'     // Cancelled
            };
            return textMap[status] || status;
        },

        // 格式化日期时间
        formatDateTime: function(dateString) {
            const date = new Date(dateString);
            return date.toLocaleString('zh-CN', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit'
            });
        },

        // 绑定最近任务事件
        bindRecentTaskEvents: function() {
            $('.task-item').off('click').on('click', (e) => {
                const taskId = $(e.currentTarget).data('task-id');
                if (taskId) {
                    this.showTaskDetails(taskId);
                }
            });
        },

        // 显示任务详情
        showTaskDetails: function(taskId) {
            console.log('显示任务详情:', taskId);
            Utils.showAlert('info', `任务详情功能将在后续版本中实现 (任务ID: ${taskId})`);
        },

        // 更新最近任务中的进度
        updateRecentTaskProgress: function(taskId, progress) {
            const $taskItem = $(`.task-item[data-task-id="${taskId}"]`);
            if ($taskItem.length) {
                const $progressBar = $taskItem.find('.progress-bar');
                const $progressText = $taskItem.find('small.text-muted');

                // 更新进度条
                $progressBar.css('width', `${progress}%`);

                // 更新进度文本 - 查找包含"完成"的small元素
                $progressText.each(function() {
                    const $this = $(this);
                    if ($this.text().includes('完成')) {
                        $this.text(`${progress}% 完成`);
                    }
                });

                console.log(`📊 更新任务 ${taskId} 进度: ${progress}%`);
            }
        },

        // 更新最近任务中的状态
        updateRecentTaskStatus: function(taskId, status) {
            const $taskItem = $(`.task-item[data-task-id="${taskId}"]`);
            if ($taskItem.length) {
                const $statusBadge = $taskItem.find('.badge');
                const statusClass = this.getTaskStatusClass(status);
                const statusIcon = this.getTaskStatusIcon(status);
                const statusText = this.getTaskStatusText(status);

                // 更新状态徽章
                $statusBadge.removeClass().addClass(`badge bg-${statusClass}`)
                    .html(`<i class="fas fa-${statusIcon}"></i> ${statusText}`);

                // 根据状态更新进度条颜色
                const $progressBar = $taskItem.find('.progress-bar');
                if (status === 'Completed' || status === '已完成') {
                    $progressBar.removeClass().addClass(`progress-bar bg-${statusClass}`);
                } else if (status === 'Converting' || status === '转换中') {
                    $progressBar.removeClass().addClass(`progress-bar bg-${statusClass} progress-bar-striped progress-bar-animated`);
                } else if (status === 'Failed' || status === '失败') {
                    $progressBar.removeClass().addClass(`progress-bar bg-${statusClass}`);
                } else {
                    $progressBar.removeClass().addClass(`progress-bar bg-${statusClass}`);
                }

                console.log(`📊 更新任务 ${taskId} 状态: ${status}`);
            }
        },

        // 开始任务计时器
        startTaskTimer: function() {
            if (window.taskTimer) {
                clearInterval(window.taskTimer);
            }

            window.taskTimer = setInterval(() => {
                if (currentTaskStartTime) {
                    const elapsedSeconds = Math.floor((new Date() - currentTaskStartTime) / 1000);
                    $('#elapsedTime').text(Utils.formatTime(elapsedSeconds));
                }
            }, 1000);
        },


    };

    // GPU模块
    const GPUManager = {
        // 初始化
        init: function() {
            console.log('🖥️ 初始化GPU模块...');

            this.loadInfo();

            console.log('✅ GPU模块初始化完成');
        },

        // 加载GPU信息
        loadInfo: async function() {
            console.log('🔍 开始检测GPU信息...');

            this.showLoading();

            try {
                // 检测GPU硬件信息
                const gpuData = await this.detectGPUHardware();

                if (gpuData.success && gpuData.data && gpuData.data.length > 0) {
                    console.log('✅ GPU检测成功:', gpuData.data);

                    // 显示GPU信息
                    this.displayGPUInfo(gpuData.data);

                    // 获取GPU能力信息用于智能预设选择
                    const capabilities = await this.getGPUCapabilities();
                    console.log('GPU能力检测结果:', capabilities);

                } else {
                    console.log('⚠️ 未检测到GPU或GPU不支持硬件加速');
                    this.showNoGPUMessage();
                }
            } catch (error) {
                console.error('❌ GPU检测失败:', error);
                this.showError(error.message);
            }
        },

        // 检测GPU硬件
        detectGPUHardware: async function() {
            try {
                // 尝试调用GPU检测API
                const response = await fetch('/api/gpu/detect', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    return await response.json();
                } else {
                    throw new Error(`GPU检测API调用失败: ${response.status}`);
                }
            } catch (error) {
                console.log('API调用失败:', error.message);
                // 返回空数据，表示没有GPU支持
                return { success: false, data: [] };
            }
        },

        // 显示加载状态
        showLoading: function() {
            $('#gpuLoading').show();
            $('#gpuResults').hide();
            $('#gpuError').hide();
        },

        // 显示GPU信息
        displayGPUInfo: function(gpuList) {
            console.log('📋 显示GPU信息');

            const $gpuCards = $('#gpuCards');
            let html = '';

            // 只显示支持硬件加速的GPU
            const supportedGPUs = gpuList.filter(gpu => gpu.supported);

            if (supportedGPUs.length === 0) {
                // 如果没有支持的GPU，显示无GPU支持消息
                this.showNoGPUMessage();
                return;
            }

            supportedGPUs.forEach((gpu, index) => {
                html += `
                    <div class="card mb-3 gpu-card" data-gpu-index="${index}">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start">
                                <div class="flex-grow-1">
                                    <h6 class="card-title mb-1">
                                        <i class="fas fa-microchip text-primary"></i>
                                        ${gpu.name}
                                    </h6>
                                    <p class="text-muted mb-2">${gpu.vendor} | ${gpu.driver || '未知驱动'}</p>
                                </div>
                                <span class="badge bg-success">
                                    <i class="fas fa-check-circle"></i> 支持硬件加速
                                </span>
                            </div>

                            <div class="row mt-3">
                                <div class="col-6 col-md-3">
                                    <small class="text-muted">显存</small><br>
                                    <span class="fw-bold">${gpu.memory || '未知'}</span>
                                </div>
                                <div class="col-6 col-md-3">
                                    <small class="text-muted">编码器</small><br>
                                    <span class="fw-bold">${gpu.encoder || '未知'}</span>
                                </div>
                                <div class="col-6 col-md-3">
                                    <small class="text-muted">最大分辨率</small><br>
                                    <span class="fw-bold">${gpu.maxResolution || '未知'}</span>
                                </div>
                                <div class="col-6 col-md-3">
                                    <small class="text-muted">性能等级</small><br>
                                    <span class="fw-bold">${gpu.performanceLevel || '未知'}</span>
                                </div>
                            </div>

                            <div class="mt-3">
                                <small class="text-success">
                                    <i class="fas fa-rocket"></i>
                                    此GPU支持${gpu.supportedFormats?.join(', ') || 'H.264'}硬件加速
                                </small>
                            </div>
                        </div>
                    </div>
                `;
            });

            $gpuCards.html(html);

            // 隐藏加载状态，显示结果
            $('#gpuLoading').hide();
            $('#gpuResults').show();
        },
        // 显示无GPU消息
        showNoGPUMessage: function() {
            $('#gpuLoading').hide();
            $('#gpuResults').hide();
            $('#gpuError').show();
        },

        // 显示错误信息
        showError: function(errorMessage) {
            $('#gpuLoading').hide();
            $('#gpuResults').hide();
            $('#gpuError').show();

            // 更新错误消息
            const $errorAlert = $('#gpuError .alert');
            $errorAlert.find('p').text(`检测失败: ${errorMessage}`);

            Utils.showAlert('warning', 'GPU检测失败，将使用CPU编码');
        },

        // 获取GPU能力信息
        getGPUCapabilities: async function() {
            try {
                const response = await fetch('/api/gpu/capabilities');
                if (response.ok) {
                    const data = await response.json();
                    console.log('✅ GPU能力检测成功:', data);
                    return data;
                } else {
                    throw new Error(`GPU能力检测失败: ${response.status}`);
                }
            } catch (error) {
                console.log('⚠️ GPU能力检测失败:', error.message);
                return { success: false, data: { hasAnyGpuSupport: false } };
            }
        },
    };

    // 错误处理模块
    const ErrorHandler = {
        // 初始化
        init: function() {
            console.log('🛡️ 初始化错误处理模块...');

            this.setupGlobalErrorHandlers();
            this.setupUnhandledPromiseRejection();
            this.setupNetworkErrorHandling();
            this.initializeErrorLogging();

            console.log('✅ 错误处理模块初始化完成');
        },

        // 设置全局错误处理器
        setupGlobalErrorHandlers: function() {
            console.log('🔧 设置全局错误处理器...');

            // 全局JavaScript错误处理
            window.addEventListener('error', (event) => {
                this.handleGlobalError({
                    type: 'JavaScript Error',
                    message: event.message,
                    filename: event.filename,
                    lineno: event.lineno,
                    colno: event.colno,
                    error: event.error,
                    stack: event.error?.stack
                });
            });

            // 资源加载错误处理
            window.addEventListener('error', (event) => {
                if (event.target !== window) {
                    this.handleResourceError({
                        type: 'Resource Error',
                        element: event.target.tagName,
                        source: event.target.src || event.target.href,
                        message: `Failed to load ${event.target.tagName.toLowerCase()}`
                    });
                }
            }, true);
        },

        // 设置未处理的Promise拒绝处理
        setupUnhandledPromiseRejection: function() {
            console.log('🔧 设置Promise错误处理...');

            window.addEventListener('unhandledrejection', (event) => {
                this.handlePromiseRejection({
                    type: 'Unhandled Promise Rejection',
                    reason: event.reason,
                    promise: event.promise,
                    message: event.reason?.message || 'Promise was rejected',
                    stack: event.reason?.stack
                });

                // 防止错误在控制台显示
                event.preventDefault();
            });
        },

        // 设置网络错误处理
        setupNetworkErrorHandling: function() {
            console.log('🔧 设置网络错误处理...');

            // 拦截fetch请求错误
            const originalFetch = window.fetch;
            window.fetch = async function(...args) {
                try {
                    const response = await originalFetch.apply(this, args);

                    if (!response.ok) {
                        ErrorHandler.handleNetworkError({
                            type: 'HTTP Error',
                            url: args[0],
                            status: response.status,
                            statusText: response.statusText,
                            message: `HTTP ${response.status}: ${response.statusText}`
                        });
                    }

                    return response;
                } catch (error) {
                    ErrorHandler.handleNetworkError({
                        type: 'Network Error',
                        url: args[0],
                        message: error.message,
                        error: error
                    });
                    throw error;
                }
            };
        },

        // 初始化错误日志记录
        initializeErrorLogging: function() {
            console.log('📝 初始化错误日志记录...');

            // 初始化错误日志存储
            if (!localStorage.getItem('videoConversion_errorLogs')) {
                localStorage.setItem('videoConversion_errorLogs', JSON.stringify([]));
            }

            // 清理旧日志（保留最近100条）
            this.cleanupOldLogs();
        },

        // 处理全局JavaScript错误
        handleGlobalError: function(errorInfo) {
            console.error('🚨 全局JavaScript错误:', errorInfo);

            // 记录错误日志
            this.logError({
                category: 'Global Error',
                severity: 'high',
                ...errorInfo,
                timestamp: new Date().toISOString(),
                userAgent: navigator.userAgent,
                url: window.location.href
            });

            // 显示用户友好的错误提示
            this.showUserFriendlyError({
                title: '应用程序错误',
                message: '应用程序遇到了一个错误，我们正在尝试恢复。',
                details: errorInfo.message,
                actions: [
                    {
                        text: '刷新页面',
                        action: () => window.location.reload(),
                        type: 'primary'
                    },
                    {
                        text: '报告问题',
                        action: () => this.showErrorReport(errorInfo),
                        type: 'secondary'
                    }
                ]
            });
        },

        // 处理资源加载错误
        handleResourceError: function(errorInfo) {
            console.warn('⚠️ 资源加载错误:', errorInfo);

            // 记录错误日志
            this.logError({
                category: 'Resource Error',
                severity: 'medium',
                ...errorInfo,
                timestamp: new Date().toISOString()
            });

            // 尝试资源恢复
            this.attemptResourceRecovery(errorInfo);
        },

        // 处理Promise拒绝错误
        handlePromiseRejection: function(errorInfo) {
            console.error('🚨 未处理的Promise拒绝:', errorInfo);

            // 记录错误日志
            this.logError({
                category: 'Promise Rejection',
                severity: 'high',
                ...errorInfo,
                timestamp: new Date().toISOString()
            });

            // 显示错误提示
            this.showUserFriendlyError({
                title: '操作失败',
                message: '某个操作未能完成，请重试。',
                details: errorInfo.message,
                actions: [
                    {
                        text: '重试',
                        action: () => window.location.reload(),
                        type: 'primary'
                    }
                ]
            });
        },

        // 处理网络错误
        handleNetworkError: function(errorInfo) {
            console.error('🌐 网络错误:', errorInfo);

            // 记录错误日志
            this.logError({
                category: 'Network Error',
                severity: 'medium',
                ...errorInfo,
                timestamp: new Date().toISOString()
            });

            // 根据错误类型显示不同提示
            if (errorInfo.status === 404) {
                Utils.showAlert('warning', '请求的资源未找到，请检查网络连接。');
            } else if (errorInfo.status === 500) {
                Utils.showAlert('danger', '服务器内部错误，请稍后重试。');
            } else if (errorInfo.status === 0 || errorInfo.type === 'Network Error') {
                Utils.showAlert('warning', '网络连接失败，请检查网络设置。');
            }
        },

        // 记录错误日志
        logError: function(errorData) {
            try {
                const logs = JSON.parse(localStorage.getItem('videoConversion_errorLogs') || '[]');

                // 添加唯一ID和额外信息
                const logEntry = {
                    id: this.generateErrorId(),
                    ...errorData,
                    sessionId: this.getSessionId(),
                    appVersion: '1.0.0',
                    browserInfo: this.getBrowserInfo()
                };

                logs.unshift(logEntry);

                // 保留最近100条日志
                if (logs.length > 100) {
                    logs.splice(100);
                }

                localStorage.setItem('videoConversion_errorLogs', JSON.stringify(logs));

                // 发送到服务器（如果配置了）
                this.sendErrorToServer(logEntry);

                console.log('📝 错误已记录:', logEntry.id);
            } catch (error) {
                console.error('记录错误日志失败:', error);
            }
        },

        // 显示用户友好的错误提示
        showUserFriendlyError: function(errorConfig) {
            try {
                // 简化的错误提示，使用alert作为备用方案
                if (typeof Utils !== 'undefined' && Utils.showAlert) {
                    // 使用现有的alert系统
                    const message = `${errorConfig.title}: ${errorConfig.message}`;
                    Utils.showAlert('danger', message);

                    // 如果有详细信息，在控制台显示
                    if (errorConfig.details) {
                        console.error('错误详情:', errorConfig.details);
                    }

                    return;
                }

                // 如果Utils不可用，使用原生alert
                const message = `${errorConfig.title}\n\n${errorConfig.message}`;
                if (errorConfig.details) {
                    message += `\n\n技术详情: ${errorConfig.details}`;
                }

                alert(message);

                // 执行第一个操作（如果有的话）
                if (errorConfig.actions && errorConfig.actions.length > 0) {
                    const firstAction = errorConfig.actions[0];
                    if (confirm(`是否执行: ${firstAction.text}?`)) {
                        firstAction.action();
                    }
                }

            } catch (error) {
                console.error('显示错误提示失败:', error);
                // 最后的备用方案
                alert(`发生错误: ${errorConfig.title || '未知错误'}`);
            }
        },

        // 尝试资源恢复
        attemptResourceRecovery: function(errorInfo) {
            console.log('🔄 尝试资源恢复:', errorInfo.source);

            if (errorInfo.element === 'SCRIPT') {
                // JavaScript文件加载失败
                Utils.showAlert('warning', 'JavaScript资源加载失败，某些功能可能不可用。');
            } else if (errorInfo.element === 'LINK') {
                // CSS文件加载失败
                Utils.showAlert('info', 'CSS样式加载失败，页面外观可能受影响。');
            } else if (errorInfo.element === 'IMG') {
                // 图片加载失败 - 可以设置默认图片
                if (errorInfo.source) {
                    const $img = $(`img[src="${errorInfo.source}"]`);
                    $img.attr('src', '/images/placeholder.png');
                }
            }
        },

        // 发送错误到服务器
        sendErrorToServer: async function(errorData) {
            try {
                // 只在生产环境发送错误报告
                if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
                    console.log('开发环境，跳过错误报告发送');
                    return;
                }

                await fetch('/api/errors/report', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(errorData)
                });

                console.log('📤 错误报告已发送到服务器');
            } catch (error) {
                console.warn('发送错误报告失败:', error);
            }
        },

        // 清理旧日志
        cleanupOldLogs: function() {
            try {
                const logs = JSON.parse(localStorage.getItem('videoConversion_errorLogs') || '[]');
                const oneWeekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);

                const recentLogs = logs.filter(log => {
                    const logDate = new Date(log.timestamp);
                    return logDate > oneWeekAgo;
                });

                localStorage.setItem('videoConversion_errorLogs', JSON.stringify(recentLogs));

                if (logs.length !== recentLogs.length) {
                    console.log(`🧹 清理了 ${logs.length - recentLogs.length} 条旧错误日志`);
                }
            } catch (error) {
                console.error('清理错误日志失败:', error);
            }
        },

        // 生成错误ID
        generateErrorId: function() {
            return 'err_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        },

        // 获取会话ID
        getSessionId: function() {
            let sessionId = sessionStorage.getItem('videoConversion_sessionId');
            if (!sessionId) {
                sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
                sessionStorage.setItem('videoConversion_sessionId', sessionId);
            }
            return sessionId;
        },

        // 获取浏览器信息
        getBrowserInfo: function() {
            return {
                userAgent: navigator.userAgent,
                language: navigator.language,
                platform: navigator.platform,
                cookieEnabled: navigator.cookieEnabled,
                onLine: navigator.onLine,
                screen: {
                    width: screen.width,
                    height: screen.height,
                    colorDepth: screen.colorDepth
                },
                viewport: {
                    width: window.innerWidth,
                    height: window.innerHeight
                }
            };
        },

        // 应用级错误处理方法
        handleApplicationError: function(error, context = {}) {
            console.error('🚨 应用级错误:', error, context);

            const errorInfo = {
                type: 'Application Error',
                message: error.message || 'Unknown application error',
                stack: error.stack,
                context: context,
                timestamp: new Date().toISOString()
            };

            // 记录错误
            this.logError({
                category: 'Application Error',
                severity: 'high',
                ...errorInfo
            });

            // 根据错误类型决定处理方式
            if (context.module) {
                this.handleModuleError(error, context.module);
            } else {
                // 通用错误处理
                Utils.showAlert('danger', `操作失败: ${error.message}`);
            }
        },

        // 模块错误处理
        handleModuleError: function(error, moduleName) {
            const moduleErrorHandlers = {
                'FileUpload': () => {
                    Utils.showAlert('danger', '文件上传失败，请检查文件格式和大小。');
                    FileUpload.hideProgress();
                },
                'SignalR': () => {
                    Utils.showAlert('warning', 'SignalR连接出现问题，正在尝试重连...');
                    setTimeout(() => SignalRManager.startConnection(), 3000);
                },
                'ConversionSettings': () => {
                    Utils.showAlert('warning', '转换设置出现问题，已重置为默认设置。');
                    ConversionSettings.loadDefaultSettings();
                },
                'TaskManager': () => {
                    Utils.showAlert('warning', '任务管理出现问题，请刷新页面。');
                },
                'GPUManager': () => {
                    Utils.showAlert('info', 'GPU检测失败，将使用CPU编码。');
                    GPUManager.showError(error.message);
                }
            };

            const handler = moduleErrorHandlers[moduleName];
            if (handler) {
                handler();
            } else {
                Utils.showAlert('danger', `${moduleName}模块出现错误: ${error.message}`);
            }
        },

        // 网络连接错误恢复
        handleNetworkRecovery: function() {
            console.log('🔄 尝试网络连接恢复...');

            // 检查网络连接状态
            if (!navigator.onLine) {
                Utils.showAlert('warning', '网络连接已断开，请检查网络设置。');
                return;
            }

            // 尝试重新连接SignalR
            if (SignalRManager.getConnectionState() === signalR.HubConnectionState.Disconnected) {
                Utils.showAlert('info', '正在重新连接...');
                SignalRManager.startConnection();
            }

            // 重新加载GPU信息
            setTimeout(() => {
                GPUManager.loadInfo();
            }, 2000);
        },

        // 获取错误日志
        getErrorLogs: function(limit = 50) {
            try {
                const logs = JSON.parse(localStorage.getItem('videoConversion_errorLogs') || '[]');
                return logs.slice(0, limit);
            } catch (error) {
                console.error('获取错误日志失败:', error);
                return [];
            }
        },

        // 清除所有错误日志
        clearErrorLogs: function() {
            try {
                localStorage.removeItem('videoConversion_errorLogs');
                console.log('🧹 所有错误日志已清除');
                Utils.showAlert('success', '错误日志已清除');
            } catch (error) {
                console.error('清除错误日志失败:', error);
            }
        },

        // 显示错误报告
        showErrorReport: function(errorInfo) {
            const reportHtml = `
                <div class="modal fade" id="errorReportModal" tabindex="-1">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">
                                    <i class="fas fa-bug"></i>
                                    错误报告
                                </h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <div class="mb-3">
                                    <label class="form-label">错误描述</label>
                                    <textarea class="form-control" rows="3" readonly>${errorInfo.message}</textarea>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">技术详情</label>
                                    <textarea class="form-control" rows="5" readonly>${JSON.stringify(errorInfo, null, 2)}</textarea>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">用户反馈（可选）</label>
                                    <textarea class="form-control" rows="3" id="userFeedback"
                                              placeholder="请描述您在遇到错误时正在进行的操作..."></textarea>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-primary" onclick="ErrorHandler.submitErrorReport('${errorInfo.id}')">
                                    <i class="fas fa-paper-plane"></i>
                                    发送报告
                                </button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                                    取消
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;

            // 移除已存在的模态框
            $('#errorReportModal').remove();

            // 添加新模态框并显示
            $('body').append(reportHtml);
            $('#errorReportModal').modal('show');
        },

        // 提交错误报告
        submitErrorReport: async function(errorId) {
            const userFeedback = $('#userFeedback').val();

            try {
                const reportData = {
                    errorId: errorId,
                    userFeedback: userFeedback,
                    timestamp: new Date().toISOString()
                };

                // 发送到服务器
                await fetch('/api/errors/feedback', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(reportData)
                });

                $('#errorReportModal').modal('hide');
                Utils.showAlert('success', '错误报告已发送，感谢您的反馈！');

            } catch (error) {
                console.error('发送错误报告失败:', error);
                Utils.showAlert('danger', '发送错误报告失败，请稍后重试。');
            }
        },

        // 错误恢复策略
        attemptRecovery: function(errorType, context = {}) {
            console.log('🔄 尝试错误恢复:', errorType);

            const recoveryStrategies = {
                'network': () => this.handleNetworkRecovery(),
                'signalr': () => {
                    SignalRManager.stopConnection();
                    setTimeout(() => SignalRManager.startConnection(), 2000);
                },
                'gpu': () => {
                    setTimeout(() => GPUManager.loadInfo(), 3000);
                },
                'storage': () => {
                    try {
                        localStorage.clear();
                        sessionStorage.clear();
                        Utils.showAlert('info', '本地存储已清理，请刷新页面。');
                    } catch (error) {
                        console.error('清理存储失败:', error);
                    }
                },
                'reload': () => {
                    Utils.showAlert('info', '正在重新加载页面...');
                    setTimeout(() => window.location.reload(), 2000);
                }
            };

            const strategy = recoveryStrategies[errorType];
            if (strategy) {
                strategy();
            } else {
                console.warn('未找到恢复策略:', errorType);
            }
        }
    };



    // 应用初始化
    const App = {
        init: function() {
            console.log('📄 VideoConversion应用初始化开始...');

            // 初始化各个模块
            ErrorHandler.init();         // 任务7 - 已实现（优先初始化）
            SignalRManager.init();        // 任务3 - 已实现
            FileUpload.init();           // 任务2 - 已实现
            ConversionSettings.init();   // 任务4 - 已实现
            TaskManager.init();          // 任务5 - 已实现
            GPUManager.init();           // 任务6 - 已实现

            // 设置页面卸载清理
            App.setupCleanup();

            // 定期检查连接健康状态
            App.setupHealthCheck();

            // 显示初始化完成消息
            Utils.showAlert('info', '应用初始化完成，SignalR通信已建立');

            console.log('✅ VideoConversion应用初始化完成');
        },

        // 设置清理机制
        setupCleanup: function() {
            $(window).on('beforeunload', function() {
                console.log('🧹 清理页面资源...');
                SignalRManager.stopConnection();
            });

            // 页面可见性变化处理
            $(document).on('visibilitychange', function() {
                if (document.hidden) {
                    console.log('📱 页面隐藏，暂停连接检查');
                } else {
                    console.log('📱 页面显示，恢复连接检查');
                    SignalRManager.checkConnectionHealth();
                }
            });
        },

        // 设置健康检查
        setupHealthCheck: function() {
            // 每30秒检查一次连接状态
            setInterval(() => {
                if (!document.hidden) {
                    SignalRManager.checkConnectionHealth();
                }
            }, 30000);
        }
    };

    // 公开API
    return {
        init: App.init,
        utils: Utils,
        fileUpload: FileUpload,
        signalR: SignalRManager,
        settings: ConversionSettings,
        taskManager: TaskManager,
        gpu: GPUManager,
        errorHandler: ErrorHandler,
        // 暴露任务相关属性
        get currentTaskId() { return currentTaskId; },
        set currentTaskId(value) { currentTaskId = value; },
        get currentTaskStartTime() { return currentTaskStartTime; },
        set currentTaskStartTime(value) { currentTaskStartTime = value; }
    };

})(jQuery);

// 全局函数（为了兼容HTML中的onclick事件）
window.loadGpuInfo = function() {
    if (typeof window.VideoConversionApp !== 'undefined' && window.VideoConversionApp.gpu) {
        window.VideoConversionApp.gpu.loadInfo();
    } else {
        console.error('VideoConversionApp未初始化或GPU模块不可用');
    }
};

window.loadRecentTasks = function() {
    if (typeof window.VideoConversionApp !== 'undefined' && window.VideoConversionApp.taskManager) {
        window.VideoConversionApp.taskManager.loadRecentTasks();
    } else {
        console.error('VideoConversionApp未初始化或TaskManager模块不可用');
    }
};

} // 关闭initializeVideoConversionApp函数

</script>

    <!-- SignalR 客户端库 -->
    <script src="~/lib/signalr/dist/browser/signalr.min.js"></script>

    <!-- 确保在所有依赖加载后执行应用代码 -->
    <script>
        $(document).ready(function() {
            console.log('jQuery版本:', $.fn.jquery);
            console.log('Bootstrap可用:', typeof bootstrap !== 'undefined');
            console.log('SignalR可用:', typeof signalR !== 'undefined');

            // 等待VideoConversionApp定义完成
            function waitForVideoConversionApp() {
                if (typeof window.VideoConversionApp !== 'undefined') {
                    console.log('VideoConversionApp已准备就绪');

                    // 初始化应用
                    try {
                        window.VideoConversionApp.init();
                        console.log('VideoConversionApp初始化成功');
                    } catch (error) {
                        console.error('VideoConversionApp初始化失败:', error);
                    }
                } else {
                    console.log('等待VideoConversionApp定义...');
                    // 100ms后重试
                    setTimeout(waitForVideoConversionApp, 100);
                }
            }

            // 开始等待
            waitForVideoConversionApp();
        });
    </script>
}
